var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AlbumComponent.html",[0,0.067,1,0.539]],["body/components/AlbumComponent.html",[0,0.102,1,0.823,2,0.448,3,0.237,4,0.199,5,0.75,6,0.323,7,0.372,8,0.199,9,1.142,10,0.674,11,1.836,12,2.221,13,1.449,14,1.809,15,2.758,16,1.11,17,2.277,18,1.836,19,1.667,20,1.938,21,2.277,22,1.329,23,1.057,24,2.277,25,2.433,26,0.372,27,0.888,28,1.581,29,1.519,30,1.231,31,0.684,32,1.269,33,1.449,34,1.449,35,0.598,36,2.277,37,0.199,38,0.319,39,2.89,40,1.592,41,1.033,42,2.89,43,2.638,44,2.302,45,2.89,46,3.584,47,2.855,48,3.584,49,2.855,50,2.855,51,3.584,52,0.448,53,1.836,54,2.277,55,2.302,56,1.836,57,2.855,58,3.271,59,1.276,60,3.271,61,3.271,62,3.271,63,0.478,64,0.719,65,3.087,66,3.271,67,3.374,68,3.271,69,3.271,70,0.725,71,2.277,72,0.448,73,2.277,74,1.269,75,2.277,76,1.228,77,1.228,78,0.752,79,0.052,80,0.674,81,0.695,82,0.643,83,1.248,84,1.938,85,3.245,86,3.245,87,2.89,88,2.277,89,2.277,90,1.836,91,2.638,92,1.836,93,2.277,94,2.277,95,1.836,96,1.836,97,1.938,98,0.888,99,1.276,100,1.329,101,1.836,102,0.983,103,2.277,104,0.858,105,1.416,106,1.546,107,3.072,108,1.943,109,2.986,110,2.277,111,1.836,112,3.584,113,2.277,114,2.277,115,2.638,116,2.234,117,1.011,118,1.057,119,2.277,120,1.416,121,2.638,122,3.833,123,3.435,124,1.012,125,2.05,126,2.221,127,2.277,128,1.416,129,3.075,130,1.836,131,1.66,132,1.938,133,2.277,134,2.932,135,2.302,136,1.142,137,1.416,138,2.89,139,1.836,140,0.961,141,1.416,142,1.416,143,1.416,144,1.909,145,2.599,146,1.429,147,1.66,148,1.416,149,0.888,150,0.888,151,1.012,152,1.012,153,1.836,154,1.836,155,1.012,156,1.66,157,1.836,158,1.836,159,2.638,160,1.416,161,1.546,162,0.684,163,2.277,164,2.277,165,1.276,166,1.836,167,1.546,168,1.416,169,2.277,170,2.221,171,2.112,172,2.221,173,1.416,174,2.638,175,1.416,176,1.416,177,1.329,178,1.416,179,1.416,180,1.416,181,2.221,182,1.033,183,0.873,184,1.416,185,3.271,186,1.453,187,1.546,188,1.416,189,2.277,190,1.416,191,2.277,192,1.416,193,1.836,194,2.855,195,2.043,196,1.416,197,1.546,198,1.66,199,1.416,200,3.584,201,1.416,202,1.836,203,3.132,204,1.416,205,0.723,206,0.319,207,0.426,208,0.629,209,1.012,210,1.142,211,0.719,212,0.719,213,0.629,214,0.319,215,0.372,216,1.416,217,0.426,218,1.142,219,0.629,220,0.719,221,0.426,222,0.237,223,0.237,224,0.701,225,0.719,226,0.859,227,1.416,228,1.142,229,1.667,230,1.836,231,1.416,232,1.416,233,1.416,234,1.416,235,0.961,236,1.142,237,1.156,238,0.826,239,1.416,240,1.449,241,1.142,242,0.858,243,1.416,244,1.416,245,1.416,246,1.416,247,1.416,248,3.271,249,3.271,250,1.416,251,1.943,252,2.277,253,1.416,254,1.416,255,1.938,256,2.277,257,1.416,258,1.416,259,1.416,260,1.416,261,1.546,262,1.667,263,2.277,264,2.277,265,1.836,266,2.349,267,1.836,268,1.416,269,3.374,270,1.836,271,1.836,272,1.416,273,1.416,274,2.932,275,1.416,276,1.012,277,1.142,278,1.142,279,1.142,280,1.416,281,1.416,282,1.416,283,1.546,284,1.416,285,1.416,286,1.416,287,1.142,288,1.416,289,2.277,290,2.855,291,1.416,292,1.416,293,2.277,294,1.416,295,1.416,296,1.416,297,1.416,298,1.416,299,1.142,300,1.416,301,1.142,302,1.142,303,1.416,304,1.416,305,2.277,306,1.416,307,2.855,308,2.277,309,3.271,310,2.277,311,2.277,312,1.416,313,1.546,314,2.277,315,1.329,316,1.546,317,1.836,318,1.836,319,1.012,320,1.546,321,2.277,322,2.277,323,1.836,324,1.836,325,2.277,326,1.836,327,3.271,328,1.156,329,2.277,330,2.277,331,4.614,332,2.277,333,1.836,334,1.836,335,1.836,336,1.836,337,1.836,338,0.372,339,0.598,340,0.598,341,0.372,342,0.746,343,0.372,344,0.372,345,0.278,346,0.372,347,0.278,348,0.372,349,0.278,350,0.372,351,0.278,352,0.519,353,0.372,354,0.278,355,0.372,356,0.278,357,0.372,358,0.278,359,0.372,360,0.278,361,0.372,362,0.278,363,0.372,364,0.323,365,0.372,366,0.021,367,0.021]],["title/components/AlbumGenreComponent.html",[0,0.067,345,0.539]],["body/components/AlbumGenreComponent.html",[0,0.125,1,0.539,2,0.831,3,0.459,4,0.385,5,1.111,6,0.625,7,0.72,8,0.522,10,0.623,14,1.677,16,1.117,23,1.315,26,0.72,27,1.453,28,1.82,29,1.82,30,1.404,31,1.119,32,1.879,33,2.147,34,2.147,35,0.978,37,0.385,38,0.522,40,2.108,41,1.202,52,0.732,59,1.77,63,0.708,64,1.391,70,0.666,72,0.732,74,2.108,76,1.716,77,1.716,78,0.539,79,0.052,80,0.708,81,0.637,82,0.539,83,1.338,98,1.453,99,1.987,100,2.173,102,1.119,117,0.625,118,0.72,149,1.453,150,1.453,151,1.654,152,1.654,155,1.654,162,0.824,165,1.453,170,2.528,177,2.173,205,0.865,206,0.385,207,0.824,208,1.218,209,1.218,211,1.391,212,1.391,214,0.522,215,0.72,217,0.824,219,1.218,220,1.391,221,0.824,222,0.459,223,0.459,224,0.708,225,1.391,226,0.72,240,1.391,242,0.824,319,2.224,338,0.72,339,0.978,340,0.978,341,0.72,342,1.035,343,0.72,344,0.72,345,1.001,346,0.72,347,0.539,348,0.72,349,0.539,350,0.72,351,0.539,352,0.85,353,0.72,354,0.892,355,0.72,356,0.539,357,0.72,358,0.892,359,0.72,360,0.539,361,0.72,362,0.539,363,0.72,364,0.625,365,0.72,366,0.034,367,0.034,368,2.21,369,1.654,370,2.528,371,3.014,372,5.006,373,2.173,374,1.879,375,3.723,376,2.769,377,3.723,378,4.744,379,3.723,380,2.769,381,1.035,382,2.871,383,1.879,384,1.89,385,2.74,386,2.871,387,3.723,388,3.002,389,1.599,390,1.86,391,0.72,392,1.599,393,2.74,394,2.74,395,2.74,396,3.723,397,3.723]],["title/components/AlbumRatingsComponent.html",[0,0.067,347,0.539]],["body/components/AlbumRatingsComponent.html",[0,0.123,1,0.509,2,0.807,3,0.433,4,0.363,5,1.078,6,0.591,7,0.68,8,0.503,10,0.687,14,1.227,16,0.591,26,0.68,27,1.397,28,1.803,29,1.803,30,1.392,31,1.076,33,2.084,34,2.084,35,0.94,37,0.363,38,0.503,40,1.591,42,3.311,52,0.871,59,1.728,63,0.687,64,1.314,70,0.675,72,0.704,74,1.824,76,1.227,77,1.69,78,0.704,79,0.052,80,0.742,81,0.653,82,0.704,83,1.221,98,1.397,99,1.961,100,2.09,102,1.593,109,2.09,117,0.937,118,0.68,122,3.879,123,3.62,125,2.137,149,1.397,150,1.397,151,1.591,152,1.591,155,1.591,171,2.191,177,2.09,183,0.817,195,1.818,198,1.818,205,0.841,206,0.363,207,0.778,208,1.15,209,1.15,211,1.314,212,1.314,214,0.503,215,0.68,217,0.778,219,1.15,220,1.314,221,0.778,222,0.433,223,0.433,224,0.687,225,1.314,226,0.68,240,1.314,242,0.778,274,2.431,276,1.15,299,2.888,301,2.888,302,2.888,338,0.68,339,0.94,340,0.94,341,0.68,342,1.011,343,0.68,344,0.68,345,0.509,346,0.68,347,0.988,348,0.68,349,0.509,350,0.68,351,0.509,352,0.817,353,0.68,354,0.871,355,0.68,356,0.509,357,0.68,358,0.871,359,0.68,360,0.509,361,0.68,362,0.509,363,0.68,364,0.591,365,0.68,366,0.033,367,0.033,369,1.591,370,2.431,373,2.09,374,1.824,380,2.396,381,1.011,382,2.787,383,1.824,384,1.818,386,2.431,388,3.572,389,1.511,392,1.511,398,2.088,399,3.542,400,3.542,401,4.207,402,1.076,403,3.581,404,3.581,405,2.787,406,3.581,407,3.581,408,3.581,409,3.581,410,2.589,411,3.581,412,2.888,413,3.581,414,2.589,415,3.581,416,3.581,417,2.589,418,2.589,419,2.589,420,2.589,421,2.589,422,3.581,423,3.581,424,3.581,425,3.581,426,3.581,427,2.589,428,3.581,429,2.589]],["title/components/AlbumsComponent.html",[0,0.067,349,0.539]],["body/components/AlbumsComponent.html",[0,0.103,1,0.284,2,0.569,3,0.242,4,0.203,5,0.76,6,0.33,7,0.38,8,0.325,10,0.647,13,1.681,14,1.895,16,0.992,19,1.932,20,0.982,23,0.869,25,2.623,26,0.38,27,0.903,28,1.59,29,1.529,30,1.238,31,0.696,32,1.287,33,1.47,34,1.47,35,0.608,37,0.203,38,0.325,39,2.335,40,1.029,41,0.962,43,2.67,52,0.455,55,2.67,56,1.867,59,1.291,63,0.485,64,0.734,67,3.4,70,0.717,72,0.455,74,1.287,76,1.134,77,1.49,78,0.712,79,0.053,80,0.728,81,0.67,82,0.712,83,1.142,90,1.867,91,2.67,92,1.867,97,1.572,99,1.645,102,1.55,104,1.417,106,1.572,108,2.356,109,1.932,111,1.867,116,2.461,117,1.09,118,1.197,124,1.287,125,2.171,129,3.485,130,1.867,131,1.839,132,2.623,134,3.094,135,2.67,136,1.867,138,3.4,139,2.67,140,1.572,144,1.932,145,3.094,146,1.468,147,1.681,149,0.903,150,0.903,151,1.029,152,1.029,156,1.681,161,1.572,162,1.22,165,0.903,171,1.029,174,2.67,177,1.351,181,2.863,182,0.962,183,0.826,186,1.717,193,2.335,195,1.962,197,2.247,198,1.175,203,0.982,205,0.728,206,0.203,207,0.696,208,0.642,209,1.029,210,1.166,211,0.734,212,0.734,213,0.642,214,0.325,215,0.38,217,0.435,219,0.642,220,0.734,221,0.435,222,0.242,223,0.242,224,0.728,225,0.734,226,0.869,228,1.166,230,2.67,235,0.982,236,1.166,237,1.962,238,0.844,240,0.734,241,2.67,242,1.267,251,0.734,255,1.966,261,2.247,262,2.255,265,1.867,266,2.66,267,2.67,269,1.867,270,1.867,271,1.867,276,1.029,277,1.166,278,1.166,279,1.166,283,0.982,287,2.335,313,1.572,315,1.69,316,1.966,317,2.67,318,2.335,319,1.471,320,0.982,328,1.175,336,1.166,337,1.867,338,0.38,339,0.608,340,0.608,341,0.38,342,0.755,343,0.38,344,0.38,345,0.284,346,0.38,347,0.284,348,0.38,349,0.829,350,0.38,351,0.284,352,0.528,353,0.38,354,0.284,355,0.38,356,0.284,357,0.38,358,0.284,359,0.38,360,0.284,361,0.38,362,0.284,363,0.38,364,0.33,365,0.38,366,0.03,367,0.021,369,1.029,374,1.029,381,0.755,382,1.966,383,1.609,384,1.175,391,0.608,402,0.696,405,1.966,430,1.166,431,1.867,432,1.572,433,2.315,434,2.315,435,1.867,436,1.175,437,2.863,438,1.572,439,1.867,440,2.335,441,2.315,442,3.622,443,2.895,444,2.895,445,2.895,446,3.622,447,1.867,448,2.315,449,3.31,450,3.31,451,3.31,452,3.31,453,3.31,454,3.31,455,1.867,456,2.604,457,2.315,458,1.867,459,2.67,460,1.351,461,2.315,462,1.446,463,2.315,464,1.446,465,1.867,466,4.217,467,3.31,468,1.446,469,2.822,470,2.315,471,1.446,472,1.446,473,1.446,474,2.315,475,1.962,476,1.446,477,2.315,478,2.315,479,2.315,480,1.446,481,2.315,482,2.315,483,1.351,484,1.446,485,1.446,486,1.867,487,3.029,488,2.895,489,2.315,490,2.315,491,1.446,492,2.315,493,2.315,494,2.315,495,1.446,496,1.867,497,1.867,498,1.966,499,2.315,500,1.446,501,1.446,502,1.446,503,3.622,504,1.446,505,1.572,506,2.315,507,3.31,508,2.315,509,2.315,510,1.446,511,1.446,512,1.867,513,1.446,514,1.446,515,1.572,516,2.315,517,1.166,518,1.446,519,1.446,520,1.446,521,2.67,522,1.867,523,1.867,524,1.446,525,1.446,526,1.446,527,2.895,528,4.349,529,1.446,530,1.166,531,1.446,532,2.315,533,1.446,534,1.446,535,2.315,536,1.446,537,1.446,538,1.572,539,2.895,540,1.446,541,0.982,542,2.315,543,1.166,544,2.895,545,2.895,546,2.895,547,1.446,548,1.446,549,1.446,550,1.446,551,1.446,552,1.446,553,1.446,554,1.446,555,1.446,556,2.315,557,1.166,558,1.446,559,1.166,560,1.446,561,1.166,562,1.446,563,2.315,564,1.446,565,1.166,566,1.446,567,1.446,568,1.166,569,1.166,570,1.446,571,1.446,572,1.446,573,1.166,574,1.446,575,1.867,576,1.867,577,2.315,578,1.867,579,2.315,580,2.315,581,2.315,582,1.867,583,2.315,584,2.315]],["title/components/AppComponent.html",[0,0.067,351,0.539]],["body/components/AppComponent.html",[0,0.133,1,0.581,2,0.864,3,0.495,4,0.415,5,1.154,6,0.675,7,0.777,8,0.55,10,0.656,15,2.231,16,1.003,23,1.279,26,0.777,27,1.529,28,1.83,30,1.42,31,1.178,32,1.953,35,1.029,37,0.415,38,0.55,41,1.218,52,0.77,59,1.825,63,0.736,64,1.501,70,0.617,72,0.77,74,1.953,77,1.506,78,0.581,79,0.052,80,0.736,81,0.617,82,0.581,83,0.777,104,1.178,117,0.675,118,0.777,131,1.989,140,2.007,149,1.529,150,1.529,151,1.741,152,1.741,182,0.675,183,0.675,197,2.007,205,0.838,206,0.415,207,0.889,211,1.501,213,1.314,214,0.716,215,0.777,219,1.314,222,0.495,223,0.495,224,0.656,226,0.777,338,0.777,339,1.029,340,1.029,341,0.777,342,1.068,343,0.777,344,0.777,345,0.581,346,0.777,347,0.581,348,0.777,349,0.92,350,0.777,351,0.983,352,1.068,353,0.777,354,0.581,355,0.777,356,0.581,357,0.777,358,0.581,359,0.777,360,0.92,361,0.777,362,0.581,363,0.777,364,0.894,365,0.777,366,0.036,367,0.036,381,1.164,436,1.989,459,3.16,475,1.501,578,3.926,585,2.384,586,3.305,587,3.16,588,2.66,589,3.918,590,3.918,591,3.918,592,3.918,593,3.773,594,3.16,595,4.394,596,3.918,597,3.918,598,4.679,599,3.918,600,3.16,601,3.926,602,2.957,603,3.918,604,3.16,605,3.918,606,3.918,607,3.918,608,3.918,609,2.957,610,2.957,611,2.957,612,2.957,613,2.957,614,2.957,615,2.384,616,2.384,617,1.154,618,2.957,619,2.957,620,2.957,621,2.957]],["title/injectables/AuthService.html",[41,0.625,622,1.069]],["body/injectables/AuthService.html",[3,0.403,4,0.338,8,0.338,10,0.661,11,2.744,16,1.228,22,1.986,23,1.424,25,2.31,37,0.338,38,0.477,40,1.512,41,1.072,44,3.183,52,0.669,63,0.661,70,0.722,72,0.669,78,0.669,79,0.052,80,0.57,81,0.602,82,0.669,83,0.632,98,1.54,104,1.452,109,3.032,117,1.185,118,1.127,124,1.907,147,1.222,162,1.412,165,1.833,182,1.033,183,1.033,186,1.512,187,2.31,205,0.661,206,0.338,214,0.477,219,2.012,222,0.403,223,0.403,224,0.661,226,1.296,229,2.642,237,2.753,238,1.405,242,1.023,251,1.727,276,1.754,352,0.549,366,0.031,367,0.031,373,1.986,376,1.986,383,1.512,391,0.894,475,2.178,483,3.078,515,2.31,582,2.744,586,2.31,616,1.94,617,0.939,622,1.327,623,1.405,624,1.94,625,3.79,626,3.032,627,3.79,628,3.402,629,3.947,630,3.28,631,4.527,632,2.68,633,4.29,634,4.29,635,1.634,636,2.88,637,3.402,638,2.82,639,2.504,640,2.31,641,2.406,642,2.744,643,3.402,644,3.407,645,4.934,646,4.29,647,3.402,648,3.402,649,2.406,650,3.208,651,4.29,652,2.406,653,3.402,654,3.28,655,2.406,656,3.402,657,2.744,658,2.744,659,3.402,660,2.406,661,2.744,662,3.46,663,3.402,664,3.402,665,3.402,666,2.406,667,2.744,668,2.744,669,3.402,670,4.29,671,2.406,672,3.79,673,2.68,674,3.402,675,3.402,676,2.406,677,3.402,678,3.947,679,2.406,680,2.744,681,1.634,682,2.406,683,1.405,684,1.94,685,2.406,686,2.406,687,2.406,688,2.406,689,2.406,690,2.406,691,2.406,692,1.94,693,2.406,694,2.406,695,2.406,696,3.402,697,2.406,698,2.406,699,2.406,700,2.406,701,2.406,702,1.634,703,1.94,704,2.406,705,2.744,706,2.406,707,2.406,708,2.406]],["title/components/AuthUserComponent.html",[0,0.067,354,0.539]],["body/components/AuthUserComponent.html",[0,0.123,1,0.64,2,0.82,3,0.545,4,0.457,5,1.209,6,0.742,7,0.855,8,0.585,10,0.698,12,2.831,16,1.249,23,1.371,26,0.855,30,1.438,31,1.383,33,2.337,35,1.095,37,0.457,38,0.585,40,1.853,41,1.244,52,0.82,63,0.771,70,0.585,72,0.82,77,1.429,78,0.64,79,0.052,80,0.771,81,0.585,82,0.64,156,2.548,205,0.813,206,0.457,208,1.853,214,0.704,215,0.855,218,2.624,221,0.978,222,0.545,223,0.545,224,0.545,225,1.652,338,0.855,339,1.095,340,1.095,341,0.855,342,1.108,343,0.855,344,0.855,345,0.64,346,0.855,347,0.64,348,0.855,349,0.64,350,0.855,351,0.64,352,0.952,353,0.855,354,1.039,355,0.855,356,0.64,357,0.855,358,0.64,359,0.855,360,0.64,361,0.855,362,0.64,363,0.855,364,0.742,365,0.855,366,0.038,367,0.038,369,1.853,370,2.831,376,2.434,381,0.742,390,2.209,391,1.275,475,2.117,600,3.712,673,2.831,709,2.624,710,5.135,711,3.363,712,4.17,713,5.019,714,3.407,715,4.603,716,4.17,717,5.019,718,3.254,719,3.254,720,4.603,721,3.254,722,3.254,723,4.17]],["title/injectables/DataService.html",[28,0.939,622,1.069]],["body/injectables/DataService.html",[3,0.415,4,0.348,8,0.563,10,0.794,13,1.764,14,1.816,15,2.207,19,2.028,28,1.626,37,0.348,38,0.488,45,2.801,52,0.683,63,0.672,70,0.698,72,0.683,76,1.191,77,1.754,78,0.9,79,0.052,80,0.766,81,0.666,82,0.9,84,2.359,85,4.009,86,4.009,87,2.801,98,1.355,99,1.565,102,1.494,104,1.206,107,3.048,108,2.719,117,1.168,118,0.651,121,2.801,124,1.932,126,2.951,131,1.258,146,1.582,155,1.101,157,3.505,158,2.801,159,3.826,162,1.206,167,2.723,170,2.951,171,2.401,172,2.951,182,0.793,183,0.566,195,1.258,198,1.764,202,2.801,205,0.728,206,0.348,214,0.488,222,0.415,223,0.415,224,0.766,242,0.745,276,2.034,328,1.258,342,0.566,366,0.032,367,0.032,374,1.544,391,0.912,402,1.044,412,2.801,431,2.801,438,2.359,469,2.028,538,2.723,541,2.359,586,1.683,617,0.967,622,1.355,623,1.447,635,1.683,636,2.902,638,2.844,639,2.537,640,2.359,650,2.844,681,1.683,683,1.447,684,1.999,714,2.723,724,1.999,725,2.359,726,4.744,727,4.011,728,3.474,729,3.474,730,4.011,731,2.801,732,2.801,733,4.347,734,4.347,735,4.347,736,2.801,737,3.474,738,2.801,739,2.478,740,4.347,741,4.011,742,4.744,743,2.801,744,2.478,745,2.478,746,3.474,747,2.478,748,2.478,749,4.011,750,2.478,751,3.474,752,2.359,753,3.474,754,2.801,755,3.474,756,2.801,757,2.478,758,2.359,759,3.474,760,2.801,761,4.011,762,3.474,763,2.478,764,3.474,765,4.011,766,3.474,767,2.478,768,2.478,769,3.474,770,3.474,771,2.478,772,2.478,773,2.478,774,2.478,775,2.478,776,2.478,777,1.999,778,2.478,779,3.474,780,2.478,781,2.478,782,2.478,783,2.478,784,1.999,785,2.478,786,1.999,787,2.478,788,2.478,789,2.478,790,2.478,791,2.478,792,2.478,793,2.478,794,2.478]],["title/components/HomeComponent.html",[0,0.067,356,0.539]],["body/components/HomeComponent.html",[0,0.131,1,0.678,2,1.004,3,0.577,4,0.484,5,1.242,6,0.786,7,0.905,8,0.607,10,0.577,16,0.786,23,1.136,26,0.905,30,1.449,31,1.3,32,2.101,35,1.136,63,0.855,70,0.484,74,1.922,79,0.052,80,0.724,101,3.488,102,1.3,146,1.3,205,0.83,206,0.484,207,1.036,214,0.607,215,0.905,217,1.036,221,1.3,222,0.577,223,0.577,338,0.905,339,1.136,340,1.136,341,0.905,342,1.131,343,0.905,344,0.905,345,0.678,346,0.905,347,0.678,348,0.905,349,0.678,350,0.905,351,0.678,352,0.987,353,0.905,354,0.975,355,0.905,356,1.051,357,0.905,358,0.975,359,0.905,360,0.678,361,0.905,362,0.678,363,0.905,364,0.786,365,0.905,366,0.039,367,0.039,381,1.079,389,2.012,392,2.012,402,1.3,438,2.937,460,2.525,505,2.937,575,3.488,576,3.488,587,3.488,588,2.937,593,3.488,594,3.488,795,2.78,796,4.325,797,2.937,798,4.325,799,3.488,800,4.325,801,3.447,802,4.325,803,3.488,804,2.78,805,2.78,806,4.325]],["title/components/LoginComponent.html",[0,0.067,358,0.539]],["body/components/LoginComponent.html",[0,0.12,1,0.544,2,0.737,3,0.463,4,0.388,5,1.116,6,0.631,7,0.727,8,0.526,10,0.627,16,1.222,22,2.659,23,1.196,26,0.727,30,1.406,31,1.126,34,2.157,35,0.984,37,0.388,38,0.526,41,1.222,52,0.737,63,0.711,70,0.668,72,0.737,76,1.284,78,0.544,79,0.052,80,0.711,81,0.639,82,0.544,83,0.984,100,2.187,104,1.475,117,0.631,118,0.984,129,3.513,132,1.878,144,2.187,146,1.126,161,2.544,166,3.022,167,2.544,182,0.97,183,0.97,198,1.902,205,0.763,206,0.388,207,0.832,209,1.229,213,1.229,214,0.526,215,0.727,217,0.832,221,1.126,222,0.463,223,0.463,224,0.627,226,0.727,229,2.98,242,1.126,266,2.864,328,2.312,338,0.727,339,0.984,340,0.984,341,0.727,342,1.039,343,0.727,344,0.727,345,0.544,346,0.727,347,0.544,348,0.727,349,0.544,350,0.727,351,0.544,352,1.039,353,0.727,354,0.544,355,0.727,356,0.544,357,0.727,358,1.004,359,0.727,360,0.544,361,0.727,362,0.544,363,0.727,364,0.631,365,0.727,366,0.034,367,0.034,373,2.187,380,2.481,381,0.631,391,0.984,402,1.126,440,3.427,456,3.105,460,2.659,517,2.231,617,1.079,626,3.194,654,3.466,657,3.022,658,3.427,725,2.544,797,2.544,799,3.022,804,2.231,805,2.231,807,2.231,808,3.747,809,4.555,810,3.747,811,3.747,812,4.76,813,4.555,814,2.231,815,3.747,816,2.767,817,3.747,818,3.747,819,4.555,820,3.747,821,4.555,822,2.767,823,4.555,824,2.767,825,2.767,826,2.767,827,2.767,828,2.231,829,2.767,830,2.231,831,2.767]],["title/components/NavComponent.html",[0,0.067,360,0.539]],["body/components/NavComponent.html",[0,0.122,1,0.526,2,0.821,3,0.448,4,0.376,5,1.097,6,0.611,7,0.703,8,0.514,10,0.613,12,2.488,14,1.256,16,1.215,22,2.139,23,1.378,26,0.703,30,1.399,31,1.101,32,1.857,35,0.962,37,0.376,38,0.514,41,1.198,52,0.72,59,1.753,63,0.699,70,0.66,72,0.72,76,1.54,78,0.526,79,0.052,80,0.699,81,0.586,82,0.526,83,0.962,97,2.488,102,1.101,104,1.101,117,0.836,118,1.18,124,1.628,134,2.837,144,2.139,146,1.35,149,1.43,150,1.43,151,1.628,152,1.628,165,1.43,181,2.488,182,0.953,183,0.836,186,1.628,205,0.788,206,0.376,207,0.805,213,1.19,214,0.514,215,0.703,217,0.805,221,0.805,222,0.448,223,0.448,224,0.613,226,0.703,235,1.817,237,2.572,319,1.628,328,2.281,338,0.703,339,0.962,340,0.962,341,0.703,342,1.025,343,0.703,344,0.703,345,0.526,346,0.703,347,0.526,348,0.703,349,0.526,350,0.703,351,0.526,352,0.836,353,0.703,354,0.883,355,0.703,356,0.526,357,0.703,358,0.883,359,0.703,360,0.996,361,0.703,362,0.526,363,0.703,364,0.611,365,0.703,366,0.033,367,0.033,369,1.628,371,2.623,380,2.139,381,0.611,389,1.563,391,0.962,392,1.563,401,2.955,402,1.101,405,2.837,436,1.86,439,2.955,456,3.088,460,3.034,475,1.86,483,2.139,505,3.05,515,2.488,559,2.159,601,3.369,617,1.044,626,2.623,627,3.369,630,3.195,632,2.837,661,2.955,662,3.623,672,2.955,673,3.439,680,2.955,797,3.195,814,2.159,828,2.159,832,2.159,833,2.955,834,3.664,835,3.664,836,4.493,837,3.664,838,2.677,839,3.664,840,3.664,841,2.677,842,3.664,843,2.677,844,2.955,845,2.677,846,2.677,847,3.664,848,2.677,849,2.677,850,2.677,851,2.677,852,2.488]],["title/components/TestWSComponent.html",[0,0.067,362,0.539]],["body/components/TestWSComponent.html",[0,0.102,1,0.28,2,0.449,3,0.238,4,0.2,5,0.6,6,0.325,7,0.374,8,0.321,10,0.383,13,1.665,14,1.908,15,1.665,16,0.92,19,1.334,20,1.944,23,0.861,26,0.374,27,0.891,29,1.631,30,1.233,35,0.6,37,0.2,38,0.321,41,1.111,52,0.449,59,1.279,63,0.479,70,0.701,72,0.449,76,0.783,77,0.487,78,0.28,79,0.053,80,0.479,81,0.46,82,0.28,83,0.861,99,0.891,102,1.566,104,0.986,107,1.914,108,1.947,116,1.334,117,1.099,118,1.265,123,0.966,124,1.704,125,1.862,145,2.226,146,1.153,147,0.722,149,0.891,150,0.891,155,1.862,156,2.046,162,1.153,165,1.496,172,1.944,182,0.653,183,0.653,186,1.273,187,1.551,195,1.454,203,2.846,205,0.479,206,0.2,212,0.722,213,0.632,214,0.504,215,0.374,220,0.722,221,0.427,222,0.238,223,0.238,224,0.383,226,1.398,229,1.334,237,1.454,238,0.83,240,1.16,242,1.212,251,1.947,261,2.226,262,1.672,266,3.073,274,0.966,283,2.226,313,1.551,315,0.83,319,1.862,326,2.644,333,1.843,338,0.374,339,0.6,340,0.6,341,0.374,342,0.748,343,0.374,344,0.374,345,0.28,346,0.374,347,0.28,348,0.374,349,0.28,350,0.374,351,0.28,352,0.521,353,0.374,354,0.28,355,0.374,356,0.28,357,0.374,358,0.28,359,0.374,360,0.28,361,0.374,362,0.824,363,0.752,364,0.325,365,0.374,366,0.038,367,0.021,369,1.015,371,1.334,374,1.791,381,0.325,383,1.015,384,1.16,399,2.226,400,2.226,402,0.427,432,1.551,435,1.843,437,0.966,458,1.843,469,1.672,483,0.83,487,2.226,497,3.093,498,2.846,521,3.093,522,2.309,523,2.309,530,1.843,538,2.737,543,1.147,561,1.843,565,3.093,569,3.38,604,2.897,617,0.555,626,1.334,630,1.944,632,1.551,642,1.843,644,0.966,650,2.097,654,0.966,692,1.147,702,0.966,703,1.147,705,2.309,725,2.226,758,1.551,786,1.843,830,1.147,844,3.093,853,1.147,854,3.251,855,1.551,856,2.285,857,4.029,858,3.279,859,2.285,860,2.864,861,2.864,862,3.592,863,3.279,864,3.279,865,3.279,866,3.279,867,3.279,868,3.279,869,3.279,870,3.279,871,3.279,872,3.279,873,3.279,874,3.279,875,3.279,876,3.279,877,1.422,878,2.285,879,3.279,880,1.422,881,2.285,882,1.422,883,4.218,884,4.191,885,3.836,886,2.285,887,2.285,888,3.836,889,3.836,890,3.836,891,2.285,892,4.191,893,5.031,894,5.211,895,1.422,896,3.279,897,1.422,898,4.619,899,2.285,900,2.285,901,1.422,902,1.422,903,1.422,904,1.422,905,1.422,906,1.422,907,1.422,908,2.285,909,3.279,910,2.285,911,1.422,912,2.285,913,1.422,914,1.843,915,1.422,916,1.843,917,2.285,918,2.285,919,2.285,920,1.422,921,1.422,922,2.285,923,1.422,924,2.285,925,2.285,926,2.285,927,3.592,928,1.422,929,2.285,930,1.422,931,1.422,932,1.422,933,1.422,934,1.422,935,2.285,936,1.422,937,1.422,938,1.422,939,1.422,940,3.279,941,2.285,942,2.285,943,2.285,944,2.285,945,1.422,946,1.422,947,2.285,948,2.285,949,1.147,950,1.422,951,1.422,952,2.285,953,1.422,954,3.279,955,1.422,956,1.422,957,2.285,958,1.422,959,1.422,960,1.422,961,1.422,962,1.422,963,2.285,964,1.422,965,1.422,966,1.422,967,1.422,968,1.422,969,3.592,970,2.285,971,2.864,972,3.279,973,1.422,974,2.285,975,2.285,976,1.422,977,1.422,978,1.422,979,1.422,980,1.422,981,1.422,982,1.422,983,1.422,984,1.422,985,1.422,986,1.422,987,1.422,988,1.422,989,1.422,990,1.422,991,1.422,992,1.422,993,3.836,994,1.422,995,1.422,996,1.422,997,2.285,998,1.422,999,1.422,1000,3.279,1001,1.422,1002,1.422,1003,1.422,1004,1.422,1005,1.422,1006,1.422,1007,1.422,1008,1.422,1009,2.285,1010,1.422,1011,1.422,1012,1.422,1013,1.422,1014,1.422,1015,1.422,1016,1.422,1017,1.422,1018,1.422,1019,1.422,1020,1.422,1021,1.422,1022,1.422,1023,1.422,1024,1.422,1025,1.422,1026,1.422,1027,1.422,1028,1.422,1029,1.422,1030,1.422,1031,1.422,1032,1.422,1033,1.422,1034,3.836,1035,2.285]],["title/injectables/WebService.html",[29,0.939,622,1.069]],["body/injectables/WebService.html",[3,0.324,4,0.271,8,0.271,10,0.822,13,2.21,14,1.885,15,2.105,29,1.492,37,0.271,38,0.407,52,0.856,53,2.34,63,0.583,70,0.706,72,0.57,78,0.951,79,0.052,80,0.81,81,0.698,82,0.999,83,0.762,84,1.97,98,1.132,99,1.509,102,1.6,104,1.625,106,2.627,107,2.965,108,2.737,115,3.12,116,2.71,117,1.214,125,2.15,146,1.357,155,2.15,156,2.526,162,1.496,165,1.132,171,1.842,182,0.441,183,0.441,186,0.859,205,0.583,206,0.271,214,0.407,222,0.324,223,0.583,224,0.85,226,0.914,242,1.454,251,2.579,255,2.955,262,2.258,276,2.183,315,1.693,316,1.97,319,2.257,320,1.313,323,1.559,324,1.559,366,0.026,367,0.035,371,2.42,374,1.719,376,2.42,383,1.289,384,1.473,391,0.762,399,1.97,400,2.815,402,0.872,432,1.97,437,1.97,447,2.34,455,2.34,469,1.693,486,2.34,487,3.065,496,2.34,498,1.97,512,2.34,617,0.754,622,1.132,623,1.129,635,1.313,636,2.71,638,2.635,639,2.258,640,1.97,644,3.526,650,3.195,667,2.34,668,2.34,681,1.313,683,1.129,702,2.815,714,1.97,731,2.34,732,2.34,736,2.34,738,2.34,743,2.34,756,2.34,758,1.97,760,3.901,784,3.901,852,2.955,855,1.97,914,2.34,916,2.34,1036,1.559,1037,2.901,1038,2.901,1039,2.901,1040,2.901,1041,2.901,1042,3.482,1043,2.901,1044,3.869,1045,3.869,1046,2.901,1047,2.901,1048,2.901,1049,2.901,1050,1.934,1051,2.901,1052,2.901,1053,1.934,1054,2.901,1055,1.934,1056,1.934,1057,2.34,1058,1.934,1059,1.934,1060,2.901,1061,1.934,1062,2.901,1063,1.934,1064,2.901,1065,2.901,1066,1.934,1067,1.934,1068,2.901,1069,2.901,1070,2.901,1071,1.934,1072,2.901,1073,1.934,1074,2.901,1075,1.934,1076,1.934,1077,3.482,1078,1.934,1079,3.482,1080,1.934,1081,4.146,1082,4.514,1083,2.901,1084,2.901,1085,2.901,1086,2.901,1087,1.934,1088,1.934,1089,1.934,1090,1.934,1091,1.934,1092,1.934,1093,2.901,1094,1.934,1095,1.934,1096,1.934,1097,1.934,1098,1.934,1099,1.934,1100,1.934]],["title/coverage.html",[1101,3.003]],["body/coverage.html",[0,0.135,1,0.77,8,0.549,9,3.157,28,1.342,29,1.342,41,0.893,79,0.051,81,0.549,162,1.177,345,0.77,347,0.77,349,0.77,351,0.77,354,0.77,356,0.77,358,0.77,360,0.77,362,0.77,366,0.043,367,0.043,368,3.157,398,3.157,430,3.157,585,3.157,622,1.951,624,3.157,709,3.157,724,3.157,795,3.157,807,3.157,832,3.157,853,3.157,1036,3.157,1101,3.157,1102,3.915,1103,3.915,1104,3.915,1105,5.612,1106,3.915,1107,3.157,1108,3.915,1109,3.157,1110,3.915,1111,3.915,1112,3.915,1113,5.001,1114,3.915,1115,3.915,1116,3.915,1117,3.915,1118,3.915,1119,3.915,1120,3.915,1121,3.915,1122,3.915]],["title/dependencies.html",[1123,1.853,1124,2.655]],["body/dependencies.html",[79,0.052,206,0.578,207,1.237,208,1.829,209,1.829,366,0.044,367,0.044,390,2.794,391,1.081,683,2.402,1124,3.318,1125,4.115,1126,5.522,1127,4.115,1128,4.816,1129,3.884,1130,4.115,1131,4.115,1132,4.115,1133,4.115,1134,4.115,1135,4.115,1136,4.115,1137,4.115,1138,4.115,1139,4.115,1140,4.115,1141,4.115,1142,4.115,1143,4.115,1144,4.115,1145,4.115]],["title/index.html",[37,0.322,1146,2.297,1147,2.297]],["body/index.html",[0,0.119,2,0.729,4,0.52,18,2.989,79,0.041,125,1.647,146,1.114,147,1.882,162,1.114,182,1.032,335,2.989,364,0.846,366,0.041,367,0.041,381,1.032,391,1.336,436,1.882,541,2.517,568,2.989,573,2.989,625,3.939,711,2.989,752,3.072,754,2.989,803,2.989,852,2.517,854,3.649,855,2.517,857,2.989,883,3.939,949,4.278,1129,2.989,1148,3.707,1149,4.884,1150,3.707,1151,5.215,1152,2.989,1153,3.707,1154,4.525,1155,3.707,1156,5.215,1157,5.305,1158,3.707,1159,4.525,1160,3.707,1161,3.707,1162,3.707,1163,3.707,1164,3.707,1165,3.707,1166,3.707,1167,4.525,1168,4.525,1169,3.707,1170,3.707,1171,4.884,1172,3.707,1173,3.707,1174,3.707,1175,3.707,1176,4.884,1177,3.707,1178,3.707,1179,3.707,1180,3.707,1181,3.707,1182,3.707,1183,3.707,1184,2.989,1185,3.707,1186,4.525,1187,3.707,1188,3.707,1189,3.707,1190,3.707,1191,4.884,1192,3.707,1193,5.305,1194,3.707,1195,3.707,1196,3.707,1197,3.707,1198,3.707,1199,3.707,1200,3.707,1201,3.707,1202,3.707,1203,3.707,1204,3.707,1205,3.707,1206,2.517,1207,3.707]],["title/modules.html",[217,1.119]],["body/modules.html",[79,0.046,217,1.329,366,0.046,367,0.046]],["title/overview.html",[1206,2.528]],["body/overview.html",[2,0.864,79,0.046,334,3.546,366,0.046,367,0.046,623,2.567,777,3.546,1206,2.986]],["title/properties.html",[38,0.462,1123,1.853]],["body/properties.html",[38,0.618,79,0.048,366,0.046,367,0.046,1152,3.551,1208,4.403]],["title/miscellaneous/variables.html",[1209,1.853,1210,2.655]],["body/miscellaneous/variables.html",[6,0.844,27,1.904,37,0.519,65,2.982,70,0.634,79,0.052,81,0.519,95,4.203,96,4.203,98,1.443,126,3.068,131,2.294,153,3.644,154,3.644,171,1.643,182,0.844,183,0.844,214,0.519,224,0.619,366,0.041,367,0.041,381,1.031,386,2.511,402,1.467,436,1.878,456,2.159,465,2.982,557,2.982,588,2.511,615,2.982,636,2.637,638,2.848,639,2.159,752,2.511,833,3.644,1057,2.982,1107,2.982,1109,3.644,1184,2.982,1209,2.982,1210,2.982,1211,3.698,1212,3.698,1213,3.698,1214,4.518,1215,4.518,1216,4.879,1217,4.879,1218,4.518,1219,4.518,1220,3.698,1221,3.698,1222,3.698,1223,3.698,1224,4.518,1225,3.698,1226,3.698,1227,4.518,1228,4.879,1229,4.879,1230,4.518,1231,4.518,1232,4.518,1233,3.698,1234,3.698,1235,3.698,1236,3.698,1237,3.698,1238,3.698,1239,3.698,1240,3.698,1241,3.698,1242,3.698]]],"invertedIndex":[["",{"_index":79,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":203,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["0.0.0",{"_index":1208,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":195,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{}}}],["1).subscribe((response",{"_index":564,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["1.1.26",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":777,"title":{},"body":{"injectables/DataService.html":{},"overview.html":{}}}],["100",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":761,"title":{},"body":{"injectables/DataService.html":{}}}],["12/12",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":1119,"title":{},"body":{"coverage.html":{}}}],["19.0.0",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["19.0.1",{"_index":1153,"title":{},"body":{"index.html":{}}}],["2",{"_index":333,"title":{},"body":{"components/AlbumComponent.html":{},"components/TestWSComponent.html":{}}}],["2.2.3",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["20/20",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["2024",{"_index":957,"title":{},"body":{"components/TestWSComponent.html":{}}}],["2025",{"_index":978,"title":{},"body":{"components/TestWSComponent.html":{}}}],["23/23",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["26/26",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":334,"title":{},"body":{"components/AlbumComponent.html":{},"overview.html":{}}}],["3.7.1",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":200,"title":{},"body":{"components/AlbumComponent.html":{}}}],["4.0.0",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":246,"title":{},"body":{"components/AlbumComponent.html":{}}}],["5",{"_index":274,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/TestWSComponent.html":{}}}],["5.3.3",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1113,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1114,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":928,"title":{},"body":{"components/TestWSComponent.html":{}}}],["9/9",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["access",{"_index":376,"title":{},"body":{"components/AlbumGenreComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/WebService.html":{}}}],["accessing",{"_index":88,"title":{},"body":{"components/AlbumComponent.html":{}}}],["actions",{"_index":839,"title":{},"body":{"components/NavComponent.html":{}}}],["activatedroute",{"_index":66,"title":{},"body":{"components/AlbumComponent.html":{}}}],["active",{"_index":89,"title":{},"body":{"components/AlbumComponent.html":{}}}],["actual_component",{"_index":365,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["add",{"_index":469,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["addalbum",{"_index":1043,"title":{},"body":{"injectables/WebService.html":{}}}],["addalbum(album",{"_index":1049,"title":{},"body":{"injectables/WebService.html":{}}}],["addalbumform",{"_index":442,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["added",{"_index":538,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{}}}],["adding",{"_index":19,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{}}}],["addition",{"_index":1051,"title":{},"body":{"injectables/WebService.html":{}}}],["additional",{"_index":803,"title":{},"body":{"components/HomeComponent.html":{},"index.html":{}}}],["addresponse",{"_index":963,"title":{},"body":{"components/TestWSComponent.html":{}}}],["adds",{"_index":758,"title":{},"body":{"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["admin",{"_index":186,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["again",{"_index":271,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["album",{"_index":14,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["album's",{"_index":496,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["album'},{'name",{"_index":344,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["album.album_title",{"_index":316,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["album.artist",{"_index":315,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["album.component.html",{"_index":36,"title":{},"body":{"components/AlbumComponent.html":{}}}],["album.genre",{"_index":320,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["album.name",{"_index":314,"title":{},"body":{"components/AlbumComponent.html":{}}}],["album.year_of_release",{"_index":318,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["album.year_of_release.tostring",{"_index":1086,"title":{},"body":{"injectables/WebService.html":{}}}],["album['_id']['$oid",{"_index":789,"title":{},"body":{"injectables/DataService.html":{}}}],["album['reviews'].push(review",{"_index":790,"title":{},"body":{"injectables/DataService.html":{}}}],["album_list",{"_index":39,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["album_title",{"_index":522,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["albumcomponent",{"_index":1,"title":{"components/AlbumComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["albumgenre.component.html",{"_index":377,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["albumgenrecomponent",{"_index":345,"title":{"components/AlbumGenreComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["albumid",{"_index":255,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["albumratings.component.html",{"_index":406,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["albumratingscomponent",{"_index":347,"title":{"components/AlbumRatingsComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["albums",{"_index":102,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["albums'},{'name",{"_index":350,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["albums.component.html",{"_index":441,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["albums.length",{"_index":980,"title":{},"body":{"components/TestWSComponent.html":{}}}],["albums[0",{"_index":982,"title":{},"body":{"components/TestWSComponent.html":{}}}],["albumscomponent",{"_index":349,"title":{"components/AlbumsComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["albumsfe",{"_index":608,"title":{},"body":{"components/AppComponent.html":{}}}],["albumtoupdate",{"_index":981,"title":{},"body":{"components/TestWSComponent.html":{}}}],["alert('album",{"_index":539,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["alert('failed",{"_index":287,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["alert('invalid",{"_index":275,"title":{},"body":{"components/AlbumComponent.html":{}}}],["alert('review",{"_index":282,"title":{},"body":{"components/AlbumComponent.html":{}}}],["alert('there",{"_index":268,"title":{},"body":{"components/AlbumComponent.html":{}}}],["allowing",{"_index":612,"title":{},"body":{"components/AppComponent.html":{}}}],["angular",{"_index":391,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"injectables/WebService.html":{},"dependencies.html":{},"index.html":{}}}],["angular's",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":208,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AuthUserComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":681,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["angular/compiler",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":206,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":209,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/LoginComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":207,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"dependencies.html":{}}}],["api",{"_index":99,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["api_key",{"_index":779,"title":{},"body":{"injectables/DataService.html":{}}}],["apis",{"_index":728,"title":{},"body":{"injectables/DataService.html":{}}}],["apiurl",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{}}}],["app",{"_index":352,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["app.component.html",{"_index":596,"title":{},"body":{"components/AppComponent.html":{}}}],["app.routes",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appcomponent",{"_index":351,"title":{"components/AppComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":1109,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":381,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["application's",{"_index":833,"title":{},"body":{"components/NavComponent.html":{},"miscellaneous/variables.html":{}}}],["applicationconfig",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":126,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(response",{"_index":927,"title":{},"body":{"components/TestWSComponent.html":{}}}],["artifacts",{"_index":1180,"title":{},"body":{"index.html":{}}}],["artist",{"_index":521,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["assets/albumdb.albums.json",{"_index":763,"title":{},"body":{"injectables/DataService.html":{}}}],["assigns",{"_index":415,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["associated",{"_index":221,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["assuming",{"_index":395,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["asyncpipe",{"_index":715,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["attempt",{"_index":820,"title":{},"body":{"components/LoginComponent.html":{}}}],["attempts",{"_index":899,"title":{},"body":{"components/TestWSComponent.html":{}}}],["auth",{"_index":717,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["auth/authuser.component",{"_index":389,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["auth0",{"_index":713,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["auth0/auth0",{"_index":390,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AuthUserComponent.html":{},"dependencies.html":{}}}],["authenticate",{"_index":809,"title":{},"body":{"components/LoginComponent.html":{}}}],["authenticated",{"_index":673,"title":{},"body":{"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"components/NavComponent.html":{}}}],["authentication",{"_index":23,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["authorization",{"_index":24,"title":{},"body":{"components/AlbumComponent.html":{}}}],["authservice",{"_index":41,"title":{"injectables/AuthService.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["authuser.component.html",{"_index":716,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["authusercomponent",{"_index":354,"title":{"components/AuthUserComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["automatically",{"_index":1162,"title":{},"body":{"index.html":{}}}],["available",{"_index":147,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/TestWSComponent.html":{},"index.html":{}}}],["average",{"_index":122,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{}}}],["averagerating",{"_index":42,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{}}}],["back",{"_index":574,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["base",{"_index":667,"title":{},"body":{"injectables/AuthService.html":{},"injectables/WebService.html":{}}}],["based",{"_index":124,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["baseurl",{"_index":1042,"title":{},"body":{"injectables/WebService.html":{}}}],["batching",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":112,"title":{},"body":{"components/AlbumComponent.html":{}}}],["behaviorsubject",{"_index":678,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":670,"title":{},"body":{"injectables/AuthService.html":{}}}],["being",{"_index":197,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{}}}],["below",{"_index":329,"title":{},"body":{"components/AlbumComponent.html":{}}}],["best",{"_index":332,"title":{},"body":{"components/AlbumComponent.html":{}}}],["bizfe",{"_index":1148,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":181,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/NavComponent.html":{}}}],["bootstrap",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["browser",{"_index":1129,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["build",{"_index":1176,"title":{},"body":{"index.html":{}}}],["building",{"_index":90,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["buildthis",{"_index":1177,"title":{},"body":{"index.html":{}}}],["calculate",{"_index":127,"title":{},"body":{"components/AlbumComponent.html":{}}}],["calculated",{"_index":416,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["calculates",{"_index":121,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["called",{"_index":151,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/NavComponent.html":{}}}],["calls",{"_index":100,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/LoginComponent.html":{}}}],["cancel",{"_index":580,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["cancels",{"_index":481,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["case",{"_index":926,"title":{},"body":{"components/TestWSComponent.html":{}}}],["cases",{"_index":858,"title":{},"body":{"components/TestWSComponent.html":{}}}],["cdr",{"_index":68,"title":{},"body":{"components/AlbumComponent.html":{}}}],["change",{"_index":95,"title":{},"body":{"components/AlbumComponent.html":{},"miscellaneous/variables.html":{}}}],["changedetectorref",{"_index":69,"title":{},"body":{"components/AlbumComponent.html":{}}}],["changes",{"_index":845,"title":{},"body":{"components/NavComponent.html":{}}}],["check",{"_index":140,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{}}}],["checkauthentication",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{}}}],["checking",{"_index":607,"title":{},"body":{"components/AppComponent.html":{}}}],["checks",{"_index":25,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{}}}],["choose",{"_index":1198,"title":{},"body":{"index.html":{}}}],["class",{"_index":223,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["clear",{"_index":547,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["clearing",{"_index":663,"title":{},"body":{"injectables/AuthService.html":{}}}],["cli",{"_index":1151,"title":{},"body":{"index.html":{}}}],["client",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["close",{"_index":577,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["coalescing",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":1167,"title":{},"body":{"index.html":{}}}],["collapse",{"_index":549,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["collection",{"_index":1037,"title":{},"body":{"injectables/WebService.html":{}}}],["come",{"_index":1196,"title":{},"body":{"index.html":{}}}],["command",{"_index":1191,"title":{},"body":{"index.html":{}}}],["comment",{"_index":943,"title":{},"body":{"components/TestWSComponent.html":{}}}],["commonmodule",{"_index":33,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AuthUserComponent.html":{}}}],["communication",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compile",{"_index":1178,"title":{},"body":{"index.html":{}}}],["complete",{"_index":335,"title":{},"body":{"components/AlbumComponent.html":{},"index.html":{}}}],["compodoc/compodoc",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":0,"title":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{},"index.html":{}}}],["component's",{"_index":218,"title":{},"body":{"components/AlbumComponent.html":{},"components/AuthUserComponent.html":{}}}],["component_template",{"_index":343,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"index.html":{},"overview.html":{}}}],["components/albums.component",{"_index":609,"title":{},"body":{"components/AppComponent.html":{}}}],["components/nav.component",{"_index":610,"title":{},"body":{"components/AppComponent.html":{}}}],["configuration",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configure",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configures",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confirm('are",{"_index":277,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["confirmation",{"_index":111,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["console.error(\"add",{"_index":973,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.error(\"initial",{"_index":976,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.error('add",{"_index":1003,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.error('delete",{"_index":1002,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.error('error",{"_index":267,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["console.error('fetch",{"_index":971,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.error('login",{"_index":829,"title":{},"body":{"components/LoginComponent.html":{}}}],["console.error('update",{"_index":994,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.log('add",{"_index":962,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.log('adding",{"_index":534,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["console.log('album",{"_index":537,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["console.log('calculating",{"_index":288,"title":{},"body":{"components/AlbumComponent.html":{}}}],["console.log('fake",{"_index":997,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.log('login",{"_index":827,"title":{},"body":{"components/LoginComponent.html":{}}}],["console.log('new",{"_index":791,"title":{},"body":{"injectables/DataService.html":{}}}],["console.log('no",{"_index":567,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["console.log('review",{"_index":259,"title":{},"body":{"components/AlbumComponent.html":{}}}],["console.log('submitting",{"_index":254,"title":{},"body":{"components/AlbumComponent.html":{}}}],["console.log('total",{"_index":297,"title":{},"body":{"components/AlbumComponent.html":{}}}],["console.log('update",{"_index":985,"title":{},"body":{"components/TestWSComponent.html":{}}}],["console.log('updated",{"_index":303,"title":{},"body":{"components/AlbumComponent.html":{}}}],["const",{"_index":251,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["constructor",{"_index":63,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["constructor(auth",{"_index":718,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["constructor(authservice",{"_index":814,"title":{},"body":{"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["constructor(dataservice",{"_index":64,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{}}}],["constructor(http",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["constructor(private",{"_index":617,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["constructor(public",{"_index":225,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AuthUserComponent.html":{}}}],["constructor(webservice",{"_index":877,"title":{},"body":{"components/TestWSComponent.html":{}}}],["containing",{"_index":741,"title":{},"body":{"injectables/DataService.html":{}}}],["content",{"_index":87,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["control",{"_index":138,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["convert",{"_index":291,"title":{},"body":{"components/AlbumComponent.html":{}}}],["correctly",{"_index":919,"title":{},"body":{"components/TestWSComponent.html":{}}}],["count",{"_index":887,"title":{},"body":{"components/TestWSComponent.html":{}}}],["coverage",{"_index":1101,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":433,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["credentials",{"_index":657,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["crud",{"_index":432,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["current",{"_index":109,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{}}}],["currently",{"_index":505,"title":{},"body":{"components/AlbumsComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["cycle",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cycles",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":77,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{}}}],["data.service",{"_index":211,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{}}}],["database",{"_index":884,"title":{},"body":{"components/TestWSComponent.html":{}}}],["dataservice",{"_index":28,"title":{"injectables/DataService.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/DataService.html":{},"coverage.html":{}}}],["datatoreturn",{"_index":769,"title":{},"body":{"injectables/DataService.html":{}}}],["datatoreturn.push(album",{"_index":772,"title":{},"body":{"injectables/DataService.html":{}}}],["date().getfullyear",{"_index":526,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["debug",{"_index":535,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["declared",{"_index":614,"title":{},"body":{"components/AppComponent.html":{}}}],["decode",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["default",{"_index":182,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":70,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["definitions",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete",{"_index":116,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["deletealbum",{"_index":447,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["deletealbum(albumid",{"_index":1052,"title":{},"body":{"injectables/WebService.html":{}}}],["deletealbum(id",{"_index":461,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["deleted",{"_index":283,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["deletereview",{"_index":53,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/WebService.html":{}}}],["deletereview(albumid",{"_index":1054,"title":{},"body":{"injectables/WebService.html":{}}}],["deletereview(reviewid",{"_index":103,"title":{},"body":{"components/AlbumComponent.html":{}}}],["deletes",{"_index":106,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["deleting",{"_index":20,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["deletion",{"_index":114,"title":{},"body":{"components/AlbumComponent.html":{}}}],["dependencies",{"_index":1124,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["derived",{"_index":675,"title":{},"body":{"injectables/AuthService.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["detailed",{"_index":1203,"title":{},"body":{"index.html":{}}}],["details",{"_index":156,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/AuthUserComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["detection",{"_index":96,"title":{},"body":{"components/AlbumComponent.html":{},"miscellaneous/variables.html":{}}}],["determine",{"_index":886,"title":{},"body":{"components/TestWSComponent.html":{}}}],["development",{"_index":1154,"title":{},"body":{"index.html":{}}}],["different",{"_index":909,"title":{},"body":{"components/TestWSComponent.html":{}}}],["directive",{"_index":341,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["directives",{"_index":364,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"index.html":{}}}],["directory",{"_index":852,"title":{},"body":{"components/NavComponent.html":{},"injectables/WebService.html":{},"index.html":{}}}],["display",{"_index":12,"title":{},"body":{"components/AlbumComponent.html":{},"components/AuthUserComponent.html":{},"components/NavComponent.html":{}}}],["displayed",{"_index":198,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{}}}],["displaying",{"_index":370,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AuthUserComponent.html":{}}}],["displays",{"_index":818,"title":{},"body":{"components/LoginComponent.html":{}}}],["dist",{"_index":1181,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":910,"title":{},"body":{"components/TestWSComponent.html":{}}}],["documentation",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"miscellaneous/variables.html":{}}}],["down",{"_index":300,"title":{},"body":{"components/AlbumComponent.html":{}}}],["during",{"_index":599,"title":{},"body":{"components/AppComponent.html":{}}}],["dynamic",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":680,"title":{},"body":{"injectables/AuthService.html":{},"components/NavComponent.html":{}}}],["e2e",{"_index":1194,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":1195,"title":{},"body":{"index.html":{}}}],["each",{"_index":925,"title":{},"body":{"components/TestWSComponent.html":{}}}],["edit",{"_index":466,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["editalbum",{"_index":448,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["editalbum(albumid",{"_index":463,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["edited",{"_index":506,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["editingalbumid",{"_index":443,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["element",{"_index":340,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["emit",{"_index":696,"title":{},"body":{"injectables/AuthService.html":{}}}],["emits",{"_index":651,"title":{},"body":{"injectables/AuthService.html":{}}}],["empty",{"_index":488,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["enable",{"_index":557,"title":{},"body":{"components/AlbumsComponent.html":{},"miscellaneous/variables.html":{}}}],["enabled",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":465,"title":{},"body":{"components/AlbumsComponent.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":1193,"title":{},"body":{"index.html":{}}}],["endindex",{"_index":310,"title":{},"body":{"components/AlbumComponent.html":{}}}],["entered",{"_index":823,"title":{},"body":{"components/LoginComponent.html":{}}}],["entering",{"_index":808,"title":{},"body":{"components/LoginComponent.html":{}}}],["entry",{"_index":589,"title":{},"body":{"components/AppComponent.html":{}}}],["error",{"_index":266,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/LoginComponent.html":{},"components/TestWSComponent.html":{}}}],["errormessage",{"_index":812,"title":{},"body":{"components/LoginComponent.html":{}}}],["essential",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventcoalescing",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":949,"title":{},"body":{"components/TestWSComponent.html":{},"index.html":{}}}],["execute",{"_index":1187,"title":{},"body":{"index.html":{}}}],["existing",{"_index":916,"title":{},"body":{"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["exists",{"_index":705,"title":{},"body":{"injectables/AuthService.html":{},"components/TestWSComponent.html":{}}}],["exit",{"_index":560,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["explore",{"_index":422,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["export",{"_index":222,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["external",{"_index":727,"title":{},"body":{"injectables/DataService.html":{}}}],["fail",{"_index":894,"title":{},"body":{"components/TestWSComponent.html":{}}}],["failed",{"_index":830,"title":{},"body":{"components/LoginComponent.html":{},"components/TestWSComponent.html":{}}}],["fails",{"_index":821,"title":{},"body":{"components/LoginComponent.html":{}}}],["fake",{"_index":898,"title":{},"body":{"components/TestWSComponent.html":{}}}],["fakealbum",{"_index":995,"title":{},"body":{"components/TestWSComponent.html":{}}}],["fakecredentials",{"_index":1004,"title":{},"body":{"components/TestWSComponent.html":{}}}],["fakecredentials.password).subscribe",{"_index":1008,"title":{},"body":{"components/TestWSComponent.html":{}}}],["false",{"_index":134,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/NavComponent.html":{}}}],["features",{"_index":435,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["fetch",{"_index":374,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["fetched",{"_index":896,"title":{},"body":{"components/TestWSComponent.html":{}}}],["fetches",{"_index":155,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["fetching",{"_index":569,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["field",{"_index":470,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["fields",{"_index":336,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["files",{"_index":1166,"title":{},"body":{"index.html":{}}}],["filter",{"_index":1060,"title":{},"body":{"injectables/WebService.html":{}}}],["filtering",{"_index":512,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["first",{"_index":326,"title":{},"body":{"components/AlbumComponent.html":{},"components/TestWSComponent.html":{}}}],["first_album_list",{"_index":860,"title":{},"body":{"components/TestWSComponent.html":{}}}],["flag",{"_index":507,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["flask",{"_index":669,"title":{},"body":{"injectables/AuthService.html":{}}}],["floyd",{"_index":939,"title":{},"body":{"components/TestWSComponent.html":{}}}],["following",{"_index":1190,"title":{},"body":{"index.html":{}}}],["for(report",{"_index":1035,"title":{},"body":{"components/TestWSComponent.html":{}}}],["form",{"_index":129,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/LoginComponent.html":{}}}],["formbuilder",{"_index":67,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["formdata",{"_index":1082,"title":{},"body":{"injectables/WebService.html":{}}}],["formdata.append('album_title",{"_index":1084,"title":{},"body":{"injectables/WebService.html":{}}}],["formdata.append('artist",{"_index":1083,"title":{},"body":{"injectables/WebService.html":{}}}],["formdata.append('genre",{"_index":1087,"title":{},"body":{"injectables/WebService.html":{}}}],["formdata.append('year_of_release",{"_index":1085,"title":{},"body":{"injectables/WebService.html":{}}}],["formgroup",{"_index":518,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["forms",{"_index":92,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["formsmodule",{"_index":440,"title":{},"body":{"components/AlbumsComponent.html":{},"components/LoginComponent.html":{}}}],["framework",{"_index":1197,"title":{},"body":{"index.html":{}}}],["full",{"_index":490,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["functionality",{"_index":725,"title":{},"body":{"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/TestWSComponent.html":{}}}],["generate",{"_index":1171,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1150,"title":{},"body":{"index.html":{}}}],["generating",{"_index":729,"title":{},"body":{"injectables/DataService.html":{}}}],["genre",{"_index":319,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumsComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["genre'},{'name",{"_index":346,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["genre.count",{"_index":397,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["genre.genre",{"_index":396,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["genres",{"_index":372,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["genresummary",{"_index":378,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["getalbum",{"_index":731,"title":{},"body":{"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["getalbum(id",{"_index":738,"title":{},"body":{"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["getalbums",{"_index":732,"title":{},"body":{"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["getalbums(page",{"_index":743,"title":{},"body":{"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["getaveragerating",{"_index":54,"title":{},"body":{"components/AlbumComponent.html":{}}}],["getaveragerating(reviews",{"_index":119,"title":{},"body":{"components/AlbumComponent.html":{}}}],["getgenresummary",{"_index":1044,"title":{},"body":{"injectables/WebService.html":{}}}],["gethighrated",{"_index":1045,"title":{},"body":{"injectables/WebService.html":{}}}],["getlastpagenumber",{"_index":733,"title":{},"body":{"injectables/DataService.html":{}}}],["getloremipsum",{"_index":734,"title":{},"body":{"injectables/DataService.html":{}}}],["getloremipsum(paragraphs",{"_index":747,"title":{},"body":{"injectables/DataService.html":{}}}],["getreviews",{"_index":1046,"title":{},"body":{"injectables/WebService.html":{}}}],["getreviews(id",{"_index":1065,"title":{},"body":{"injectables/WebService.html":{}}}],["getroundedrating",{"_index":407,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["getroundedrating(rating",{"_index":409,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["getting",{"_index":1146,"title":{"index.html":{}},"body":{}}],["getuserrole",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{}}}],["given",{"_index":412,"title":{},"body":{"components/AlbumRatingsComponent.html":{},"injectables/DataService.html":{}}}],["greatest",{"_index":575,"title":{},"body":{"components/AlbumsComponent.html":{},"components/HomeComponent.html":{}}}],["group",{"_index":193,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["grouped",{"_index":1062,"title":{},"body":{"injectables/WebService.html":{}}}],["handleauth",{"_index":836,"title":{},"body":{"components/NavComponent.html":{}}}],["handles",{"_index":22,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["handling",{"_index":380,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["headers",{"_index":784,"title":{},"body":{"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["hearts",{"_index":331,"title":{},"body":{"components/AlbumComponent.html":{}}}],["helpbuilding",{"_index":1175,"title":{},"body":{"index.html":{}}}],["here",{"_index":792,"title":{},"body":{"injectables/DataService.html":{}}}],["high",{"_index":399,"title":{},"body":{"components/AlbumRatingsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["highly",{"_index":1064,"title":{},"body":{"injectables/WebService.html":{}}}],["holds",{"_index":388,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{}}}],["home",{"_index":797,"title":{},"body":{"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["home'},{'name",{"_index":357,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["home.component.css",{"_index":800,"title":{},"body":{"components/HomeComponent.html":{}}}],["home.component.html",{"_index":798,"title":{},"body":{"components/HomeComponent.html":{}}}],["homecomponent",{"_index":356,"title":{"components/HomeComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["hook",{"_index":150,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["html",{"_index":339,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["http",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["http://127.0.0.1:5000",{"_index":665,"title":{},"body":{"injectables/AuthService.html":{}}}],["http://127.0.0.1:5000/albums",{"_index":1074,"title":{},"body":{"injectables/WebService.html":{}}}],["http://localhost:4200",{"_index":1161,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders",{"_index":1075,"title":{},"body":{"injectables/WebService.html":{}}}],["httpheaders().set('x",{"_index":1081,"title":{},"body":{"injectables/WebService.html":{}}}],["https://api.api",{"_index":782,"title":{},"body":{"injectables/DataService.html":{}}}],["i=0",{"_index":778,"title":{},"body":{"injectables/DataService.html":{}}}],["id",{"_index":108,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["identifier",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["if(album['_id']['$oid",{"_index":771,"title":{},"body":{"injectables/DataService.html":{}}}],["import",{"_index":205,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["imported",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imports",{"_index":31,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["include",{"_index":215,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["includes",{"_index":855,"title":{},"body":{"components/TestWSComponent.html":{},"injectables/WebService.html":{},"index.html":{}}}],["including",{"_index":18,"title":{},"body":{"components/AlbumComponent.html":{},"index.html":{}}}],["incomplete",{"_index":130,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["increment",{"_index":566,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["index",{"_index":37,"title":{"index.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":508,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["indicates",{"_index":185,"title":{},"body":{"components/AlbumComponent.html":{}}}],["indicating",{"_index":759,"title":{},"body":{"injectables/DataService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["information",{"_index":711,"title":{},"body":{"components/AuthUserComponent.html":{},"index.html":{}}}],["initial",{"_index":604,"title":{},"body":{"components/AppComponent.html":{},"components/TestWSComponent.html":{}}}],["initialcount",{"_index":959,"title":{},"body":{"components/TestWSComponent.html":{}}}],["initialization",{"_index":593,"title":{},"body":{"components/AppComponent.html":{},"components/HomeComponent.html":{}}}],["initialize",{"_index":519,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["initialized",{"_index":152,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/NavComponent.html":{}}}],["initializes",{"_index":458,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["initialresponse.length",{"_index":960,"title":{},"body":{"components/TestWSComponent.html":{}}}],["injectable",{"_index":622,"title":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["injectables",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{},"overview.html":{}}}],["injects",{"_index":72,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["input",{"_index":548,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["instance",{"_index":720,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["integrates",{"_index":438,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{}}}],["interacting",{"_index":384,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["interactions",{"_index":17,"title":{},"body":{"components/AlbumComponent.html":{}}}],["interacts",{"_index":373,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["invalid",{"_index":132,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/LoginComponent.html":{}}}],["ipsum",{"_index":86,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["isadmin",{"_index":43,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["isauthenticated",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["isincomplete",{"_index":55,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["isinvalid",{"_index":56,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["isinvalid(control",{"_index":136,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["isloggedin",{"_index":44,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/AuthService.html":{}}}],["isloggedinsubject",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{}}}],["isuntouched",{"_index":57,"title":{},"body":{"components/AlbumComponent.html":{}}}],["jquery",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":726,"title":{},"body":{"injectables/DataService.html":{}}}],["jsondata",{"_index":762,"title":{},"body":{"injectables/DataService.html":{}}}],["jsondata.foreach((album",{"_index":788,"title":{},"body":{"injectables/DataService.html":{}}}],["jsondata.foreach(function(album",{"_index":770,"title":{},"body":{"injectables/DataService.html":{}}}],["jsondata.slice(pagestart",{"_index":767,"title":{},"body":{"injectables/DataService.html":{}}}],["jwt",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["karma",{"_index":1188,"title":{},"body":{"index.html":{}}}],["key",{"_index":786,"title":{},"body":{"injectables/DataService.html":{},"components/TestWSComponent.html":{}}}],["kyrie10101",{"_index":1005,"title":{},"body":{"components/TestWSComponent.html":{}}}],["landing",{"_index":796,"title":{},"body":{"components/HomeComponent.html":{}}}],["leave",{"_index":327,"title":{},"body":{"components/AlbumComponent.html":{}}}],["legend",{"_index":338,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["level",{"_index":616,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["lifecycle",{"_index":149,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["list",{"_index":125,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"index.html":{}}}],["listed",{"_index":423,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["loads",{"_index":474,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["local",{"_index":541,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"index.html":{}}}],["localstorage",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.getitem('role",{"_index":703,"title":{},"body":{"injectables/AuthService.html":{},"components/TestWSComponent.html":{}}}],["localstorage.getitem('token",{"_index":702,"title":{},"body":{"injectables/AuthService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["localstorage.removeitem('role",{"_index":698,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.removeitem('token",{"_index":697,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('role",{"_index":691,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('token",{"_index":689,"title":{},"body":{"injectables/AuthService.html":{}}}],["log",{"_index":328,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["logged",{"_index":187,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/AuthService.html":{},"components/TestWSComponent.html":{}}}],["loggedin",{"_index":234,"title":{},"body":{"components/AlbumComponent.html":{}}}],["logic",{"_index":594,"title":{},"body":{"components/AppComponent.html":{},"components/HomeComponent.html":{}}}],["login",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["login'},{'name",{"_index":359,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["login(username",{"_index":653,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.component",{"_index":392,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["login.component.css",{"_index":811,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.html",{"_index":810,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":358,"title":{"components/LoginComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["logout",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{},"components/NavComponent.html":{}}}],["logs",{"_index":661,"title":{},"body":{"injectables/AuthService.html":{},"components/NavComponent.html":{}}}],["longer",{"_index":900,"title":{},"body":{"components/TestWSComponent.html":{}}}],["lorem",{"_index":85,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["loremipsum",{"_index":45,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["main",{"_index":588,"title":{},"body":{"components/AppComponent.html":{},"components/HomeComponent.html":{},"miscellaneous/variables.html":{}}}],["maintains",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{}}}],["makes",{"_index":753,"title":{},"body":{"injectables/DataService.html":{}}}],["making",{"_index":98,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["manage",{"_index":600,"title":{},"body":{"components/AppComponent.html":{},"components/AuthUserComponent.html":{}}}],["management",{"_index":439,"title":{},"body":{"components/AlbumsComponent.html":{},"components/NavComponent.html":{}}}],["manages",{"_index":11,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/AuthService.html":{}}}],["managing",{"_index":76,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["manually",{"_index":93,"title":{},"body":{"components/AlbumComponent.html":{}}}],["marks",{"_index":611,"title":{},"body":{"components/AppComponent.html":{}}}],["match",{"_index":891,"title":{},"body":{"components/TestWSComponent.html":{}}}],["matching",{"_index":367,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(jsondata.length",{"_index":768,"title":{},"body":{"injectables/DataService.html":{}}}],["math.ceil(this.reviews_list.length",{"_index":306,"title":{},"body":{"components/AlbumComponent.html":{}}}],["math.floor(math.random",{"_index":776,"title":{},"body":{"injectables/DataService.html":{}}}],["math.floor(totalrating",{"_index":298,"title":{},"body":{"components/AlbumComponent.html":{}}}],["math.round(rating",{"_index":421,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["message",{"_index":819,"title":{},"body":{"components/LoginComponent.html":{}}}],["messages",{"_index":924,"title":{},"body":{"components/TestWSComponent.html":{}}}],["metadata",{"_index":26,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["method",{"_index":755,"title":{},"body":{"injectables/DataService.html":{}}}],["methods",{"_index":52,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["miscellaneous",{"_index":1209,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mismatch",{"_index":970,"title":{},"body":{"components/TestWSComponent.html":{}}}],["mode",{"_index":467,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["modify",{"_index":1165,"title":{},"body":{"index.html":{}}}],["module",{"_index":615,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":217,"title":{"modules.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"modules.html":{}}}],["more",{"_index":568,"title":{},"body":{"components/AlbumsComponent.html":{},"index.html":{}}}],["multiple",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":80,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["namefor",{"_index":1172,"title":{},"body":{"index.html":{}}}],["nav.component.html",{"_index":835,"title":{},"body":{"components/NavComponent.html":{}}}],["navcomponent",{"_index":360,"title":{"components/NavComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["navigate",{"_index":573,"title":{},"body":{"components/AlbumsComponent.html":{},"index.html":{}}}],["navigates",{"_index":144,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["navigation",{"_index":460,"title":{},"body":{"components/AlbumsComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["navigation'},{'name",{"_index":361,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["nearest",{"_index":301,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{}}}],["necessary",{"_index":73,"title":{},"body":{"components/AlbumComponent.html":{}}}],["needs",{"_index":1201,"title":{},"body":{"index.html":{}}}],["new",{"_index":162,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"index.html":{}}}],["newalbum",{"_index":532,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["newalbum.album_title",{"_index":967,"title":{},"body":{"components/TestWSComponent.html":{}}}],["newalbum.artist",{"_index":965,"title":{},"body":{"components/TestWSComponent.html":{}}}],["newly",{"_index":889,"title":{},"body":{"components/TestWSComponent.html":{}}}],["newreview",{"_index":252,"title":{},"body":{"components/AlbumComponent.html":{}}}],["newreview).subscribe",{"_index":258,"title":{},"body":{"components/AlbumComponent.html":{}}}],["next",{"_index":145,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["nextpage",{"_index":449,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["nextreviewpage",{"_index":58,"title":{},"body":{"components/AlbumComponent.html":{}}}],["ng",{"_index":1157,"title":{},"body":{"index.html":{}}}],["ngmodel",{"_index":517,"title":{},"body":{"components/AlbumsComponent.html":{},"components/LoginComponent.html":{}}}],["ngoninit",{"_index":59,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["ninjas.com/v1/loremipsum?paragraphs",{"_index":783,"title":{},"body":{"injectables/DataService.html":{}}}],["nirvana",{"_index":948,"title":{},"body":{"components/TestWSComponent.html":{}}}],["noreviews",{"_index":322,"title":{},"body":{"components/AlbumComponent.html":{}}}],["null",{"_index":503,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["num_reviews",{"_index":944,"title":{},"body":{"components/TestWSComponent.html":{}}}],["number",{"_index":171,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["number(review.rating",{"_index":296,"title":{},"body":{"components/AlbumComponent.html":{}}}],["number(sessionstorage['page",{"_index":529,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["number:'1.1",{"_index":427,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["number:\\'1.1",{"_index":429,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["numreviews",{"_index":775,"title":{},"body":{"injectables/DataService.html":{}}}],["observable",{"_index":650,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["observable((observer",{"_index":787,"title":{},"body":{"injectables/DataService.html":{}}}],["observables",{"_index":646,"title":{},"body":{"injectables/AuthService.html":{}}}],["observer.complete",{"_index":794,"title":{},"body":{"injectables/DataService.html":{}}}],["observer.next",{"_index":793,"title":{},"body":{"injectables/DataService.html":{}}}],["onaddalbum",{"_index":450,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["oncancelform",{"_index":451,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["one",{"_index":1199,"title":{},"body":{"index.html":{}}}],["onlogin",{"_index":813,"title":{},"body":{"components/LoginComponent.html":{}}}],["onsubmit",{"_index":60,"title":{},"body":{"components/AlbumComponent.html":{}}}],["open",{"_index":1160,"title":{},"body":{"index.html":{}}}],["operation",{"_index":760,"title":{},"body":{"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["operations",{"_index":383,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["optimize",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optimized",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optimizes",{"_index":1183,"title":{},"body":{"index.html":{}}}],["optional",{"_index":82,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["options",{"_index":834,"title":{},"body":{"components/NavComponent.html":{}}}],["otherwise",{"_index":135,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["oticg67nm4btjaj3fayxkg==w8yd3uetrtx2s8fv",{"_index":780,"title":{},"body":{"injectables/DataService.html":{}}}],["out",{"_index":662,"title":{},"body":{"injectables/AuthService.html":{},"components/NavComponent.html":{}}}],["output",{"_index":892,"title":{},"body":{"components/TestWSComponent.html":{}}}],["overview",{"_index":1206,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":1123,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":146,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"index.html":{}}}],["pageend",{"_index":766,"title":{},"body":{"injectables/DataService.html":{}}}],["pages",{"_index":172,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{}}}],["pagesize",{"_index":730,"title":{},"body":{"injectables/DataService.html":{}}}],["pagestart",{"_index":764,"title":{},"body":{"injectables/DataService.html":{}}}],["paginated",{"_index":191,"title":{},"body":{"components/AlbumComponent.html":{}}}],["paginatedreviews",{"_index":46,"title":{},"body":{"components/AlbumComponent.html":{}}}],["paginatereviews",{"_index":61,"title":{},"body":{"components/AlbumComponent.html":{}}}],["paginates",{"_index":169,"title":{},"body":{"components/AlbumComponent.html":{}}}],["paginating",{"_index":21,"title":{},"body":{"components/AlbumComponent.html":{}}}],["pagination",{"_index":265,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["paragraphs",{"_index":749,"title":{},"body":{"injectables/DataService.html":{}}}],["param",{"_index":224,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["parameters",{"_index":78,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["params",{"_index":1077,"title":{},"body":{"injectables/WebService.html":{}}}],["params.genre",{"_index":1078,"title":{},"body":{"injectables/WebService.html":{}}}],["pass",{"_index":893,"title":{},"body":{"components/TestWSComponent.html":{}}}],["password",{"_index":654,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/TestWSComponent.html":{}}}],["per",{"_index":202,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["perform",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["performance",{"_index":1184,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["performing",{"_index":113,"title":{},"body":{"components/AlbumComponent.html":{}}}],["performs",{"_index":603,"title":{},"body":{"components/AppComponent.html":{}}}],["permission",{"_index":974,"title":{},"body":{"components/TestWSComponent.html":{}}}],["pink",{"_index":938,"title":{},"body":{"components/TestWSComponent.html":{}}}],["pipe",{"_index":687,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipes",{"_index":1174,"title":{},"body":{"index.html":{}}}],["placeholder",{"_index":189,"title":{},"body":{"components/AlbumComponent.html":{}}}],["please",{"_index":269,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["point",{"_index":590,"title":{},"body":{"components/AppComponent.html":{}}}],["populate",{"_index":618,"title":{},"body":{"components/AppComponent.html":{}}}],["populatereviews",{"_index":735,"title":{},"body":{"injectables/DataService.html":{}}}],["populates",{"_index":158,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["populating",{"_index":598,"title":{},"body":{"components/AppComponent.html":{}}}],["post",{"_index":1069,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata",{"_index":1093,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append(\"rating",{"_index":1096,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append(\"review_text",{"_index":1095,"title":{},"body":{"injectables/WebService.html":{}}}],["postdata.append(\"username",{"_index":1094,"title":{},"body":{"injectables/WebService.html":{}}}],["posting",{"_index":912,"title":{},"body":{"components/TestWSComponent.html":{}}}],["postreview",{"_index":736,"title":{},"body":{"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["postreview(id",{"_index":756,"title":{},"body":{"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["posts",{"_index":1068,"title":{},"body":{"injectables/WebService.html":{}}}],["powerful",{"_index":1169,"title":{},"body":{"index.html":{}}}],["presence",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{}}}],["previous",{"_index":174,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["previouspage",{"_index":452,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["previousreviewpage",{"_index":62,"title":{},"body":{"components/AlbumComponent.html":{}}}],["pristine",{"_index":142,"title":{},"body":{"components/AlbumComponent.html":{}}}],["private",{"_index":226,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["privileges",{"_index":509,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["process",{"_index":817,"title":{},"body":{"components/LoginComponent.html":{}}}],["processing",{"_index":404,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["production",{"_index":1182,"title":{},"body":{"index.html":{}}}],["profile",{"_index":710,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["profile'},{'name",{"_index":355,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["project",{"_index":1149,"title":{},"body":{"index.html":{}}}],["prompts",{"_index":110,"title":{},"body":{"components/AlbumComponent.html":{}}}],["properly",{"_index":1010,"title":{},"body":{"components/TestWSComponent.html":{}}}],["properties",{"_index":38,"title":{"properties.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"properties.html":{}}}],["property",{"_index":386,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":219,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["providedin",{"_index":684,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{}}}],["providehttpclient",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":27,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/TestWSComponent.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":402,"title":{},"body":{"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["providezonechangedetection",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providing",{"_index":591,"title":{},"body":{"components/AppComponent.html":{}}}],["public",{"_index":40,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{}}}],["purposes",{"_index":879,"title":{},"body":{"components/TestWSComponent.html":{}}}],["query",{"_index":487,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["random",{"_index":751,"title":{},"body":{"injectables/DataService.html":{}}}],["rate",{"_index":330,"title":{},"body":{"components/AlbumComponent.html":{}}}],["rated",{"_index":400,"title":{},"body":{"components/AlbumRatingsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["rating",{"_index":123,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/TestWSComponent.html":{}}}],["rating.album_title",{"_index":425,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["rating.artist",{"_index":428,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["rating.average_rating",{"_index":426,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["ratings",{"_index":401,"title":{},"body":{"components/AlbumRatingsComponent.html":{},"components/NavComponent.html":{}}}],["ratings'},{'name",{"_index":348,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["reactive",{"_index":91,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["reactiveformsmodule",{"_index":34,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/LoginComponent.html":{}}}],["read",{"_index":434,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["recalculate",{"_index":264,"title":{},"body":{"components/AlbumComponent.html":{}}}],["redirect",{"_index":850,"title":{},"body":{"components/NavComponent.html":{}}}],["redirects",{"_index":840,"title":{},"body":{"components/NavComponent.html":{}}}],["reducing",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reference",{"_index":1207,"title":{},"body":{"index.html":{}}}],["references",{"_index":1204,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":664,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh",{"_index":545,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["refreshed",{"_index":479,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["refreshes",{"_index":499,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["related",{"_index":101,"title":{},"body":{"components/AlbumComponent.html":{},"components/HomeComponent.html":{}}}],["release",{"_index":579,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["reload",{"_index":1163,"title":{},"body":{"index.html":{}}}],["reloads",{"_index":489,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["remove",{"_index":286,"title":{},"body":{"components/AlbumComponent.html":{}}}],["report",{"_index":1034,"title":{},"body":{"components/TestWSComponent.html":{}}}],["request",{"_index":888,"title":{},"body":{"components/TestWSComponent.html":{}}}],["requests",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":802,"title":{},"body":{"components/HomeComponent.html":{}}}],["required",{"_index":459,"title":{},"body":{"components/AlbumsComponent.html":{},"components/AppComponent.html":{}}}],["reset",{"_index":543,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["resets",{"_index":482,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["resources",{"_index":1202,"title":{},"body":{"index.html":{}}}],["response",{"_index":242,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["response.artist",{"_index":937,"title":{},"body":{"components/TestWSComponent.html":{}}}],["response.length",{"_index":565,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["response.role",{"_index":692,"title":{},"body":{"injectables/AuthService.html":{},"components/TestWSComponent.html":{}}}],["response.some(album",{"_index":951,"title":{},"body":{"components/TestWSComponent.html":{}}}],["response.text",{"_index":774,"title":{},"body":{"injectables/DataService.html":{}}}],["response.text.slice(0",{"_index":245,"title":{},"body":{"components/AlbumComponent.html":{}}}],["response.token",{"_index":690,"title":{},"body":{"injectables/AuthService.html":{}}}],["responsible",{"_index":369,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AuthUserComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["results",{"_index":366,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":714,"title":{},"body":{"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["retrieved",{"_index":177,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{}}}],["retrieves",{"_index":157,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["retrieving",{"_index":84,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["return",{"_index":276,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{}}}],["returns",{"_index":117,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["review",{"_index":107,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["review.rating",{"_index":325,"title":{},"body":{"components/AlbumComponent.html":{}}}],["review.rating.tostring",{"_index":1097,"title":{},"body":{"injectables/WebService.html":{}}}],["review.review_id",{"_index":285,"title":{},"body":{"components/AlbumComponent.html":{}}}],["review.review_text",{"_index":324,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/WebService.html":{}}}],["review.username",{"_index":323,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/WebService.html":{}}}],["review_text",{"_index":231,"title":{},"body":{"components/AlbumComponent.html":{}}}],["reviewform",{"_index":47,"title":{},"body":{"components/AlbumComponent.html":{}}}],["reviewid",{"_index":115,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/WebService.html":{}}}],["reviewid).subscribe",{"_index":281,"title":{},"body":{"components/AlbumComponent.html":{}}}],["reviewing",{"_index":1039,"title":{},"body":{"injectables/WebService.html":{}}}],["reviewpage",{"_index":48,"title":{},"body":{"components/AlbumComponent.html":{}}}],["reviews",{"_index":15,"title":{},"body":{"components/AlbumComponent.html":{},"components/AppComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["reviews.length",{"_index":289,"title":{},"body":{"components/AlbumComponent.html":{}}}],["reviews.reduce((sum",{"_index":294,"title":{},"body":{"components/AlbumComponent.html":{}}}],["reviews_list",{"_index":49,"title":{},"body":{"components/AlbumComponent.html":{}}}],["reviews_list?.length",{"_index":321,"title":{},"body":{"components/AlbumComponent.html":{}}}],["reviewsperpage",{"_index":50,"title":{},"body":{"components/AlbumComponent.html":{}}}],["role",{"_index":237,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["roles",{"_index":97,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/NavComponent.html":{}}}],["root",{"_index":586,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{}}}],["root'},{'name",{"_index":353,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["round",{"_index":299,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{}}}],["rounded",{"_index":413,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["rounds",{"_index":411,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["route",{"_index":65,"title":{},"body":{"components/AlbumComponent.html":{},"miscellaneous/variables.html":{}}}],["router",{"_index":456,"title":{},"body":{"components/AlbumsComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":405,"title":{},"body":{"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/NavComponent.html":{}}}],["routeroutlet",{"_index":32,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/HomeComponent.html":{},"components/NavComponent.html":{}}}],["routes",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routing",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1156,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1189,"title":{},"body":{"index.html":{}}}],["running",{"_index":1159,"title":{},"body":{"index.html":{}}}],["runs",{"_index":881,"title":{},"body":{"components/TestWSComponent.html":{}}}],["rxjs",{"_index":683,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DataService.html":{},"injectables/WebService.html":{},"dependencies.html":{}}}],["save",{"_index":582,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/AuthService.html":{}}}],["saved",{"_index":260,"title":{},"body":{"components/AlbumComponent.html":{}}}],["saves",{"_index":659,"title":{},"body":{"injectables/AuthService.html":{}}}],["scaffolding",{"_index":1168,"title":{},"body":{"index.html":{}}}],["schematics",{"_index":1173,"title":{},"body":{"index.html":{}}}],["search",{"_index":437,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["searchalbum",{"_index":1047,"title":{},"body":{"injectables/WebService.html":{}}}],["searchalbum(query",{"_index":1070,"title":{},"body":{"injectables/WebService.html":{}}}],["searchalbums",{"_index":453,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["searches",{"_index":486,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["searching",{"_index":914,"title":{},"body":{"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["searchquery",{"_index":444,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["searchresults",{"_index":445,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["second",{"_index":922,"title":{},"body":{"components/TestWSComponent.html":{}}}],["second_album_list",{"_index":861,"title":{},"body":{"components/TestWSComponent.html":{}}}],["selected",{"_index":918,"title":{},"body":{"components/TestWSComponent.html":{}}}],["selector",{"_index":30,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["selects",{"_index":917,"title":{},"body":{"components/TestWSComponent.html":{}}}],["sending",{"_index":656,"title":{},"body":{"injectables/AuthService.html":{}}}],["sends",{"_index":497,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["sent",{"_index":478,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["serveonce",{"_index":1158,"title":{},"body":{"index.html":{}}}],["server",{"_index":625,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["serves",{"_index":587,"title":{},"body":{"components/AppComponent.html":{},"components/HomeComponent.html":{}}}],["service",{"_index":83,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["services",{"_index":74,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/HomeComponent.html":{}}}],["services/authservice.component",{"_index":213,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["services/web.service",{"_index":212,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["sessionstorage['page",{"_index":527,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["set",{"_index":238,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/TestWSComponent.html":{}}}],["sets",{"_index":153,"title":{},"body":{"components/AlbumComponent.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":605,"title":{},"body":{"components/AppComponent.html":{}}}],["showaddalbumform",{"_index":446,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["showing",{"_index":583,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["simulate",{"_index":1015,"title":{},"body":{"components/TestWSComponent.html":{}}}],["single",{"_index":1057,"title":{},"body":{"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":746,"title":{},"body":{"injectables/DataService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"index.html":{}}}],["specific",{"_index":13,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"injectables/DataService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["specifically",{"_index":220,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["specified",{"_index":742,"title":{},"body":{"injectables/DataService.html":{}}}],["speed",{"_index":1185,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":585,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:25",{"_index":597,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:40",{"_index":602,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":1107,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/auth/authuser.component.ts",{"_index":709,"title":{},"body":{"components/AuthUserComponent.html":{},"coverage.html":{}}}],["src/app/auth/authuser.component.ts:16",{"_index":719,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["src/app/auth/authuser.component.ts:24",{"_index":721,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["src/app/components/album.component.ts",{"_index":9,"title":{},"body":{"components/AlbumComponent.html":{},"coverage.html":{}}}],["src/app/components/album.component.ts:101",{"_index":178,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:109",{"_index":148,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:145",{"_index":160,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:176",{"_index":105,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:207",{"_index":120,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:228",{"_index":168,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:243",{"_index":173,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:25",{"_index":176,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:253",{"_index":143,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:266",{"_index":137,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:276",{"_index":141,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:286",{"_index":128,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:30",{"_index":188,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:35",{"_index":175,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:40",{"_index":192,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:45",{"_index":199,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:50",{"_index":179,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:56",{"_index":196,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:62",{"_index":201,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:67",{"_index":204,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:72",{"_index":190,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:78",{"_index":184,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:84",{"_index":71,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/album.component.ts:97",{"_index":180,"title":{},"body":{"components/AlbumComponent.html":{}}}],["src/app/components/albumgenre.component.ts",{"_index":368,"title":{},"body":{"components/AlbumGenreComponent.html":{},"coverage.html":{}}}],["src/app/components/albumgenre.component.ts:26",{"_index":379,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["src/app/components/albumgenre.component.ts:36",{"_index":387,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["src/app/components/albumgenre.component.ts:42",{"_index":385,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["src/app/components/albumratings.component.ts",{"_index":398,"title":{},"body":{"components/AlbumRatingsComponent.html":{},"coverage.html":{}}}],["src/app/components/albumratings.component.ts:25",{"_index":418,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["src/app/components/albumratings.component.ts:29",{"_index":408,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["src/app/components/albumratings.component.ts:38",{"_index":417,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["src/app/components/albumratings.component.ts:44",{"_index":414,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["src/app/components/albumratings.component.ts:58",{"_index":410,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["src/app/components/albums.component.ts",{"_index":430,"title":{},"body":{"components/AlbumsComponent.html":{},"coverage.html":{}}}],["src/app/components/albums.component.ts:117",{"_index":476,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:140",{"_index":491,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:147",{"_index":480,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:158",{"_index":471,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:170",{"_index":468,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:184",{"_index":464,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:194",{"_index":495,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:218",{"_index":462,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:236",{"_index":484,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:251",{"_index":472,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:269",{"_index":485,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:27",{"_index":501,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:33",{"_index":510,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:38",{"_index":511,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:43",{"_index":513,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:48",{"_index":500,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:53",{"_index":504,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:59",{"_index":514,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:65",{"_index":457,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:77",{"_index":502,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/albums.component.ts:98",{"_index":473,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["src/app/components/home.component.ts",{"_index":795,"title":{},"body":{"components/HomeComponent.html":{},"coverage.html":{}}}],["src/app/components/home.component.ts:17",{"_index":801,"title":{},"body":{"components/HomeComponent.html":{}}}],["src/app/components/login.component.ts",{"_index":807,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/components/login.component.ts:20",{"_index":824,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login.component.ts:25",{"_index":822,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login.component.ts:30",{"_index":815,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/login.component.ts:46",{"_index":816,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/components/nav.component.ts",{"_index":832,"title":{},"body":{"components/NavComponent.html":{},"coverage.html":{}}}],["src/app/components/nav.component.ts:23",{"_index":843,"title":{},"body":{"components/NavComponent.html":{}}}],["src/app/components/nav.component.ts:28",{"_index":837,"title":{},"body":{"components/NavComponent.html":{}}}],["src/app/components/nav.component.ts:43",{"_index":841,"title":{},"body":{"components/NavComponent.html":{}}}],["src/app/components/nav.component.ts:59",{"_index":838,"title":{},"body":{"components/NavComponent.html":{}}}],["src/app/data.service.ts",{"_index":724,"title":{},"body":{"injectables/DataService.html":{},"coverage.html":{}}}],["src/app/data.service.ts:110",{"_index":757,"title":{},"body":{"injectables/DataService.html":{}}}],["src/app/data.service.ts:19",{"_index":737,"title":{},"body":{"injectables/DataService.html":{}}}],["src/app/data.service.ts:35",{"_index":744,"title":{},"body":{"injectables/DataService.html":{}}}],["src/app/data.service.ts:46",{"_index":745,"title":{},"body":{"injectables/DataService.html":{}}}],["src/app/data.service.ts:56",{"_index":739,"title":{},"body":{"injectables/DataService.html":{}}}],["src/app/data.service.ts:70",{"_index":750,"title":{},"body":{"injectables/DataService.html":{}}}],["src/app/data.service.ts:94",{"_index":748,"title":{},"body":{"injectables/DataService.html":{}}}],["src/app/services/authservice.component.ts",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/services/authservice.component.ts:104",{"_index":649,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:16",{"_index":666,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:21",{"_index":671,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:26",{"_index":679,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:31",{"_index":676,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:36",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:55",{"_index":655,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:71",{"_index":660,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:83",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/authservice.component.ts:95",{"_index":652,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/web.service.ts",{"_index":1036,"title":{},"body":{"injectables/WebService.html":{},"coverage.html":{}}}],["src/app/services/web.service.ts:110",{"_index":1061,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:118",{"_index":1063,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:127",{"_index":1066,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:137",{"_index":1067,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:155",{"_index":1055,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:16",{"_index":1048,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:32",{"_index":1058,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:43",{"_index":1056,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:52",{"_index":1071,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:63",{"_index":1050,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:82",{"_index":1073,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/services/web.service.ts:99",{"_index":1053,"title":{},"body":{"injectables/WebService.html":{}}}],["src/app/testws.component.ts",{"_index":853,"title":{},"body":{"components/TestWSComponent.html":{},"coverage.html":{}}}],["src/app/testws.component.ts:120",{"_index":913,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:134",{"_index":903,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:147",{"_index":902,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:166",{"_index":882,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:19",{"_index":923,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:210",{"_index":915,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:24",{"_index":921,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:260",{"_index":897,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:29",{"_index":878,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:297",{"_index":906,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:315",{"_index":905,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:330",{"_index":920,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:347",{"_index":880,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:43",{"_index":895,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:55",{"_index":907,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:71",{"_index":901,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:83",{"_index":904,"title":{},"body":{"components/TestWSComponent.html":{}}}],["src/app/testws.component.ts:95",{"_index":911,"title":{},"body":{"components/TestWSComponent.html":{}}}],["standalone",{"_index":595,"title":{},"body":{"components/AppComponent.html":{}}}],["start",{"_index":1155,"title":{},"body":{"index.html":{}}}],["started",{"_index":1147,"title":{"index.html":{}},"body":{}}],["startindex",{"_index":308,"title":{},"body":{"components/AlbumComponent.html":{}}}],["state",{"_index":483,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["statements",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":1041,"title":{},"body":{"injectables/WebService.html":{}}}],["status",{"_index":601,"title":{},"body":{"components/AppComponent.html":{},"components/NavComponent.html":{}}}],["steps",{"_index":885,"title":{},"body":{"components/TestWSComponent.html":{}}}],["still",{"_index":1001,"title":{},"body":{"components/TestWSComponent.html":{}}}],["store",{"_index":1179,"title":{},"body":{"index.html":{}}}],["stored",{"_index":647,"title":{},"body":{"injectables/AuthService.html":{}}}],["stores",{"_index":844,"title":{},"body":{"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["string",{"_index":104,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["structure",{"_index":592,"title":{},"body":{"components/AppComponent.html":{}}}],["stylesheet",{"_index":804,"title":{},"body":{"components/HomeComponent.html":{},"components/LoginComponent.html":{}}}],["styleurl",{"_index":799,"title":{},"body":{"components/HomeComponent.html":{},"components/LoginComponent.html":{}}}],["styling",{"_index":805,"title":{},"body":{"components/HomeComponent.html":{},"components/LoginComponent.html":{}}}],["subject",{"_index":677,"title":{},"body":{"injectables/AuthService.html":{}}}],["submission",{"_index":164,"title":{},"body":{"components/AlbumComponent.html":{}}}],["submit",{"_index":337,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["submits",{"_index":161,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/LoginComponent.html":{}}}],["submitting",{"_index":194,"title":{},"body":{"components/AlbumComponent.html":{}}}],["subscribe",{"_index":559,"title":{},"body":{"components/AlbumsComponent.html":{},"components/NavComponent.html":{}}}],["subscribe((response",{"_index":240,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["subscribes",{"_index":842,"title":{},"body":{"components/NavComponent.html":{}}}],["success",{"_index":167,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{}}}],["successful",{"_index":658,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["successfully",{"_index":261,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["such",{"_index":436,"title":{},"body":{"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/NavComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["suits",{"_index":1200,"title":{},"body":{"index.html":{}}}],["sum",{"_index":295,"title":{},"body":{"components/AlbumComponent.html":{}}}],["summaries",{"_index":1040,"title":{},"body":{"injectables/WebService.html":{}}}],["summary",{"_index":371,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["summing",{"_index":292,"title":{},"body":{"components/AlbumComponent.html":{}}}],["supports",{"_index":431,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/DataService.html":{}}}],["sure",{"_index":278,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["table",{"_index":1122,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1121,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":682,"title":{},"body":{"injectables/AuthService.html":{}}}],["tap((response",{"_index":688,"title":{},"body":{"injectables/AuthService.html":{}}}],["tasks",{"_index":606,"title":{},"body":{"components/AppComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["templates",{"_index":216,"title":{},"body":{"components/AlbumComponent.html":{}}}],["templateurl",{"_index":35,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["test",{"_index":857,"title":{},"body":{"components/TestWSComponent.html":{},"index.html":{}}}],["test_album",{"_index":956,"title":{},"body":{"components/TestWSComponent.html":{}}}],["test_album.album_title",{"_index":968,"title":{},"body":{"components/TestWSComponent.html":{}}}],["test_album.artist",{"_index":966,"title":{},"body":{"components/TestWSComponent.html":{}}}],["test_output",{"_index":862,"title":{},"body":{"components/TestWSComponent.html":{}}}],["test_review",{"_index":942,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testaddalbum",{"_index":863,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testalbumsfetched",{"_index":864,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testdeletealbum",{"_index":865,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testgetalbum",{"_index":866,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testgetgenrerated",{"_index":867,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testgethighrated",{"_index":868,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testgetreviews",{"_index":869,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testing",{"_index":854,"title":{},"body":{"components/TestWSComponent.html":{},"index.html":{}}}],["testisauthenticated",{"_index":870,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testlogin",{"_index":871,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testpagesofalbumsaredifferent",{"_index":872,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testpostreview",{"_index":873,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testrunning",{"_index":1192,"title":{},"body":{"index.html":{}}}],["tests",{"_index":883,"title":{},"body":{"components/TestWSComponent.html":{},"index.html":{}}}],["testsearchalbum",{"_index":874,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testupdatealbum",{"_index":875,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testuserrole",{"_index":876,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testws",{"_index":363,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["testws.component.html",{"_index":859,"title":{},"body":{"components/TestWSComponent.html":{}}}],["testwscomponent",{"_index":362,"title":{"components/TestWSComponent.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"coverage.html":{}}}],["text",{"_index":159,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/DataService.html":{}}}],["this.addalbumform",{"_index":520,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.addalbumform.controls[control].invalid",{"_index":550,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.addalbumform.controls[control].touched",{"_index":551,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.addalbumform.reset",{"_index":542,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.addalbumform.valid",{"_index":531,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.addalbumform.value",{"_index":533,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.album_list",{"_index":241,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["this.album_list.push(response.data",{"_index":540,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.authservice.checkauthentication",{"_index":621,"title":{},"body":{"components/AppComponent.html":{}}}],["this.authservice.getuserrole().subscribe((role",{"_index":1017,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.authservice.isauthenticated$.next(false",{"_index":1014,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.authservice.isauthenticated$.next(true",{"_index":1011,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.authservice.isauthenticated$.subscribe((status",{"_index":846,"title":{},"body":{"components/NavComponent.html":{}}}],["this.authservice.isauthenticated().subscribe((isauthenticated",{"_index":1012,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.authservice.isloggedin$.subscribe((loggedin",{"_index":232,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.authservice.login(fakecredentials.username",{"_index":1007,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.authservice.login(this.username",{"_index":825,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.logout",{"_index":849,"title":{},"body":{"components/NavComponent.html":{}}}],["this.authservice.userrole$.next",{"_index":1019,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.authservice.userrole$.next('admin",{"_index":1016,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.authservice.userrole$.subscribe((role",{"_index":235,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/NavComponent.html":{}}}],["this.averagerating",{"_index":290,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.baseurl}/${albumid}/reviews/${reviewid",{"_index":1100,"title":{},"body":{"injectables/WebService.html":{}}}],["this.dataservice.getlastpagenumber",{"_index":584,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.dataservice.getloremipsum(1",{"_index":243,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.dataservice.populatereviews",{"_index":619,"title":{},"body":{"components/AppComponent.html":{}}}],["this.editingalbumid",{"_index":556,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.errormessage",{"_index":831,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.first_album_list",{"_index":930,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.first_album_list[0]['_id",{"_index":933,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.formbuilder.group",{"_index":228,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["this.genresummary",{"_index":394,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["this.getaveragerating(this.reviews_list",{"_index":263,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.getloremipsum(1).subscribe((response",{"_index":773,"title":{},"body":{"injectables/DataService.html":{}}}],["this.http.delete",{"_index":1099,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.delete(`${this.baseurl}/${albumid",{"_index":1090,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get",{"_index":781,"title":{},"body":{"injectables/DataService.html":{}}}],["this.http.get('http://127.0.0.1:5000/albums",{"_index":1079,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://127.0.0.1:5000/albums/genre",{"_index":1091,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://127.0.0.1:5000/albums/high",{"_index":1092,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.get('http://127.0.0.1:5000/albums/search",{"_index":1080,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.post(`${this.apiurl}/auth/login",{"_index":686,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.post(`${this.baseurl",{"_index":1088,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.post(`${this.baseurl}/${id}/reviews",{"_index":1098,"title":{},"body":{"injectables/WebService.html":{}}}],["this.http.put(`${this.baseurl}/${albumid",{"_index":1089,"title":{},"body":{"injectables/WebService.html":{}}}],["this.isadmin",{"_index":236,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["this.isauthenticated",{"_index":847,"title":{},"body":{"components/NavComponent.html":{}}}],["this.isauthenticated$.asobservable",{"_index":707,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated$.next(!!token",{"_index":704,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated$.next(false",{"_index":700,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated$.next(true",{"_index":694,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isinvalid('album_title",{"_index":553,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.isinvalid('artist",{"_index":552,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.isinvalid('genre",{"_index":555,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.isinvalid('year_of_release",{"_index":554,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.isloggedin",{"_index":233,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.isloggedinsubject.asobservable",{"_index":674,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloggedinsubject.next(false",{"_index":699,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloggedinsubject.next(true",{"_index":693,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loremipsum",{"_index":244,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.ngoninit",{"_index":544,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.page",{"_index":528,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.pagesize",{"_index":765,"title":{},"body":{"injectables/DataService.html":{}}}],["this.paginatedreviews",{"_index":311,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.paginatereviews",{"_index":249,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.password).subscribe",{"_index":826,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.ratings",{"_index":420,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["this.reviewform",{"_index":227,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviewform.patchvalue",{"_index":273,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviewform.reset",{"_index":272,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviewform.valid",{"_index":250,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviewform.value",{"_index":253,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviewpage",{"_index":309,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviews_list",{"_index":248,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviews_list.filter",{"_index":284,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviews_list.length",{"_index":304,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviews_list.slice(startindex",{"_index":312,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.reviewsperpage",{"_index":307,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.route.snapshot.parammap.get('id",{"_index":256,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.router.navigate",{"_index":828,"title":{},"body":{"components/LoginComponent.html":{},"components/NavComponent.html":{}}}],["this.router.navigate(['/albums",{"_index":572,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.router.navigate(['/login",{"_index":851,"title":{},"body":{"components/NavComponent.html":{}}}],["this.searchquery.trim",{"_index":570,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.second_album_list",{"_index":932,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.second_album_list[0]['_id",{"_index":934,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.showaddalbumform",{"_index":546,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.test_output.push(\"add",{"_index":969,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"albums",{"_index":935,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"delete",{"_index":1000,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"fetch",{"_index":940,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"get",{"_index":954,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"isauthenticated",{"_index":1013,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"login",{"_index":1009,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"page",{"_index":929,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"post",{"_index":947,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"search",{"_index":952,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"update",{"_index":993,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.test_output.push(\"userrole",{"_index":1018,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testaddalbum",{"_index":1029,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testalbumsfetched",{"_index":1023,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testdeletealbum",{"_index":1033,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testgetalbum",{"_index":1025,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testgetgenrerated",{"_index":1032,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testgethighrated",{"_index":1031,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testgetreviews",{"_index":1026,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testisauthenticated",{"_index":1021,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testlogin",{"_index":1020,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testpagesofalbumsaredifferent",{"_index":1024,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testpostreview",{"_index":1027,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testsearchalbum",{"_index":1028,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testupdatealbum",{"_index":1030,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.testuserrole",{"_index":1022,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.totalreviewpages",{"_index":305,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.userrole",{"_index":848,"title":{},"body":{"components/NavComponent.html":{}}}],["this.userrole$.asobservable",{"_index":708,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrole$.next",{"_index":701,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrole$.next(response.role",{"_index":695,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrole$.next(role",{"_index":706,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.webservice.addalbum(fakealbum).subscribe((addresponse",{"_index":996,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.addalbum(newalbum).subscribe",{"_index":536,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.webservice.addalbum(test_album).subscribe((addresponse",{"_index":961,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.deletealbum(addresponse.album_id).subscribe",{"_index":998,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.deletealbum(id).subscribe",{"_index":562,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.webservice.deletereview(albumid",{"_index":280,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.webservice.getalbum('674a22f2c95979aa6b4510d7').subscribe((response",{"_index":936,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getalbum(addresponse.album_id).subscribe",{"_index":999,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getalbum(addresponse.album_id).subscribe((newalbum",{"_index":964,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getalbum(albumtoupdate._id).subscribe((updatedalbumdetails",{"_index":986,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getalbum(this.route.snapshot.parammap.get('id",{"_index":239,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.webservice.getalbums(1).subscribe((albums",{"_index":979,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getalbums(1).subscribe((initialresponse",{"_index":958,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getalbums(1).subscribe((response",{"_index":530,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["this.webservice.getalbums(2).subscribe((response",{"_index":931,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getalbums(this.page",{"_index":563,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.webservice.getgenresummary",{"_index":393,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["this.webservice.getgenresummary().subscribe((response",{"_index":955,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.gethighrated",{"_index":419,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["this.webservice.gethighrated().subscribe((response",{"_index":953,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getreviews('674a22f2c95979aa6b4510d7",{"_index":946,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getreviews('674a22f2c95979aa6b4510d7').subscribe((response",{"_index":941,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.getreviews(this.route.snapshot.parammap.get('id",{"_index":247,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.webservice.postreview('674a22f2c95979aa6b4510d7",{"_index":945,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.postreview(albumid",{"_index":257,"title":{},"body":{"components/AlbumComponent.html":{}}}],["this.webservice.searchalbum(query).subscribe((response",{"_index":950,"title":{},"body":{"components/TestWSComponent.html":{}}}],["this.webservice.searchalbum(this.searchquery).subscribe",{"_index":571,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.webservice.updatealbum(album._id",{"_index":558,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["this.webservice.updatealbum(albumtoupdate._id",{"_index":983,"title":{},"body":{"components/TestWSComponent.html":{}}}],["through",{"_index":620,"title":{},"body":{"components/AppComponent.html":{}}}],["throughout",{"_index":685,"title":{},"body":{"injectables/AuthService.html":{}}}],["throwerror",{"_index":1076,"title":{},"body":{"injectables/WebService.html":{}}}],["time",{"_index":576,"title":{},"body":{"components/AlbumsComponent.html":{},"components/HomeComponent.html":{}}}],["title",{"_index":578,"title":{},"body":{"components/AlbumsComponent.html":{},"components/AppComponent.html":{}}}],["today",{"_index":424,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["toggleaddalbumform",{"_index":454,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["toggles",{"_index":492,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["token",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["tools",{"_index":1170,"title":{},"body":{"index.html":{}}}],["total",{"_index":170,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"injectables/DataService.html":{}}}],["totalrating",{"_index":293,"title":{},"body":{"components/AlbumComponent.html":{}}}],["totalreviewpages",{"_index":51,"title":{},"body":{"components/AlbumComponent.html":{}}}],["touched",{"_index":139,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["track",{"_index":313,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["tracks",{"_index":672,"title":{},"body":{"injectables/AuthService.html":{},"components/NavComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["triggered",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["triggering",{"_index":94,"title":{},"body":{"components/AlbumComponent.html":{}}}],["true",{"_index":131,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/DataService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":270,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["tslib",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":908,"title":{},"body":{"components/TestWSComponent.html":{}}}],["type",{"_index":81,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unable",{"_index":972,"title":{},"body":{"components/TestWSComponent.html":{}}}],["unique",{"_index":740,"title":{},"body":{"injectables/DataService.html":{}}}],["unit",{"_index":1186,"title":{},"body":{"index.html":{}}}],["untouched",{"_index":133,"title":{},"body":{"components/AlbumComponent.html":{}}}],["up",{"_index":154,"title":{},"body":{"components/AlbumComponent.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":262,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["updatealbum",{"_index":455,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/WebService.html":{}}}],["updatealbum(album",{"_index":494,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["updatealbum(albumid",{"_index":1072,"title":{},"body":{"injectables/WebService.html":{}}}],["updated",{"_index":498,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["updatedalbum",{"_index":977,"title":{},"body":{"components/TestWSComponent.html":{}}}],["updatedalbum).subscribe",{"_index":984,"title":{},"body":{"components/TestWSComponent.html":{}}}],["updatedalbum.album_title",{"_index":990,"title":{},"body":{"components/TestWSComponent.html":{}}}],["updatedalbum.artist",{"_index":988,"title":{},"body":{"components/TestWSComponent.html":{}}}],["updatedalbum.year_of_release",{"_index":992,"title":{},"body":{"components/TestWSComponent.html":{}}}],["updatedalbumdetails.album_title",{"_index":989,"title":{},"body":{"components/TestWSComponent.html":{}}}],["updatedalbumdetails.artist",{"_index":987,"title":{},"body":{"components/TestWSComponent.html":{}}}],["updatedalbumdetails.year_of_release",{"_index":991,"title":{},"body":{"components/TestWSComponent.html":{}}}],["updates",{"_index":165,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{}}}],["updating",{"_index":561,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["upon",{"_index":166,"title":{},"body":{"components/AlbumComponent.html":{},"components/LoginComponent.html":{}}}],["url",{"_index":668,"title":{},"body":{"injectables/AuthService.html":{},"injectables/WebService.html":{}}}],["use",{"_index":754,"title":{},"body":{"injectables/DataService.html":{},"index.html":{}}}],["used",{"_index":214,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":16,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["user's",{"_index":475,"title":{},"body":{"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/AuthUserComponent.html":{},"components/NavComponent.html":{}}}],["user.name",{"_index":723,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["user123",{"_index":1006,"title":{},"body":{"components/TestWSComponent.html":{}}}],["username",{"_index":229,"title":{},"body":{"components/AlbumComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/TestWSComponent.html":{}}}],["userrole",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["uses",{"_index":712,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["using",{"_index":752,"title":{},"body":{"injectables/DataService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["utilities",{"_index":75,"title":{},"body":{"components/AlbumComponent.html":{}}}],["utility",{"_index":403,"title":{},"body":{"components/AlbumRatingsComponent.html":{}}}],["utilizes",{"_index":375,"title":{},"body":{"components/AlbumGenreComponent.html":{}}}],["valid",{"_index":477,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["validates",{"_index":163,"title":{},"body":{"components/AlbumComponent.html":{}}}],["validation",{"_index":975,"title":{},"body":{"components/TestWSComponent.html":{}}}],["validators",{"_index":210,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["validators.max(new",{"_index":525,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["validators.min(1900",{"_index":524,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["validators.required",{"_index":230,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["value",{"_index":183,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":648,"title":{},"body":{"injectables/AuthService.html":{}}}],["var",{"_index":342,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"components/AuthUserComponent.html":{},"injectables/DataService.html":{},"components/HomeComponent.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["variable",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1210,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":856,"title":{},"body":{"components/TestWSComponent.html":{}}}],["verify",{"_index":890,"title":{},"body":{"components/TestWSComponent.html":{}}}],["verifying",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{},"components/TestWSComponent.html":{}}}],["version",{"_index":1152,"title":{},"body":{"index.html":{},"properties.html":{}}}],["view",{"_index":581,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["visibility",{"_index":493,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["visible",{"_index":516,"title":{},"body":{"components/AlbumsComponent.html":{}}}],["visit",{"_index":1205,"title":{},"body":{"index.html":{}}}],["void",{"_index":118,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/DataService.html":{},"components/LoginComponent.html":{},"components/NavComponent.html":{},"components/TestWSComponent.html":{}}}],["want",{"_index":279,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["webservice",{"_index":29,"title":{"injectables/WebService.html":{}},"body":{"components/AlbumComponent.html":{},"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{},"injectables/WebService.html":{},"coverage.html":{}}}],["welcome",{"_index":806,"title":{},"body":{"components/HomeComponent.html":{}}}],["well",{"_index":1038,"title":{},"body":{"injectables/WebService.html":{}}}],["whenever",{"_index":1164,"title":{},"body":{"index.html":{}}}],["whether",{"_index":515,"title":{},"body":{"components/AlbumsComponent.html":{},"injectables/AuthService.html":{},"components/NavComponent.html":{}}}],["whole",{"_index":302,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumRatingsComponent.html":{}}}],["wide",{"_index":382,"title":{},"body":{"components/AlbumGenreComponent.html":{},"components/AlbumRatingsComponent.html":{},"components/AlbumsComponent.html":{}}}],["within",{"_index":722,"title":{},"body":{"components/AuthUserComponent.html":{}}}],["without",{"_index":613,"title":{},"body":{"components/AppComponent.html":{}}}],["x",{"_index":785,"title":{},"body":{"injectables/DataService.html":{}}}],["year",{"_index":317,"title":{},"body":{"components/AlbumComponent.html":{},"components/AlbumsComponent.html":{}}}],["year_of_release",{"_index":523,"title":{},"body":{"components/AlbumsComponent.html":{},"components/TestWSComponent.html":{}}}],["yes",{"_index":1059,"title":{},"body":{"injectables/WebService.html":{}}}],["zone",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AlbumComponent.html":{"url":"components/AlbumComponent.html","title":"component - AlbumComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AlbumComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/album.component.ts\n\n\n\n    \n        Description\n    \n    \n        The AlbumComponent manages the display of a specific album, its reviews, and user interactions,\nincluding adding, deleting, and paginating reviews. It also handles user authentication and authorization checks.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                DataService\n                                WebService\n                \n            \n\n\n            \n                selector\n                album\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                            CommonModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./album.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                album\n                            \n                            \n                                album_list\n                            \n                            \n                                    Public\n                                authService\n                            \n                            \n                                averageRating\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                isAdmin\n                            \n                            \n                                isLoggedIn\n                            \n                            \n                                loremIpsum\n                            \n                            \n                                paginatedReviews\n                            \n                            \n                                reviewForm\n                            \n                            \n                                reviewPage\n                            \n                            \n                                reviews_list\n                            \n                            \n                                reviewsPerPage\n                            \n                            \n                                totalReviewPages\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteReview\n                            \n                            \n                                getAverageRating\n                            \n                            \n                                isIncomplete\n                            \n                            \n                                isInvalid\n                            \n                            \n                                isUntouched\n                            \n                            \n                                nextReviewPage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                paginateReviews\n                            \n                            \n                                previousReviewPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DataService, route: ActivatedRoute, formBuilder: FormBuilder, cdr: ChangeDetectorRef, authService: AuthService, webService: WebService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/album.component.ts:84\n                            \n                        \n\n                \n                    \n                            Constructor for AlbumComponent.\nInjects necessary services and utilities for managing album data, reviews, and user authentication.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for retrieving data like lorem ipsum content.\n\n\n                                                        \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for accessing the active route and its parameters.\n\n\n                                                        \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for building reactive forms.\n\n\n                                                        \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for manually triggering change detection.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing user authentication and roles.\n\n\n                                                        \n                                                \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for making API calls related to albums and reviews.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteReview\n                        \n                    \n                \n            \n            \n                \ndeleteReview(reviewId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:176\n                        \n                    \n\n\n            \n                \n                        Deletes a review by its ID for the current album.\nPrompts the user for confirmation before performing the deletion.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reviewId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the review to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAverageRating\n                        \n                    \n                \n            \n            \n                \ngetAverageRating(reviews: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:207\n                        \n                    \n\n\n            \n                \n                        Calculates the average rating based on the current reviews list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reviews\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of reviews to calculate the average rating from.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isIncomplete\n                        \n                    \n                \n            \n            \n                \nisIncomplete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:286\n                        \n                    \n\n\n            \n                \n                        Checks if the review form is incomplete.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                True if the form is invalid, untouched, or incomplete, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInvalid\n                        \n                    \n                \n            \n            \n                \nisInvalid(control: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:266\n                        \n                    \n\n\n            \n                \n                        Checks if a specific form control is invalid and touched.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the control to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                True if the control is invalid and touched, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUntouched\n                        \n                    \n                \n            \n            \n                \nisUntouched()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:276\n                        \n                    \n\n\n            \n                \n                        Checks if the review form is untouched.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                True if any control in the form is pristine, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextReviewPage\n                        \n                    \n                \n            \n            \n                \nnextReviewPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:253\n                        \n                    \n\n\n            \n                \n                        Navigates to the next page of reviews, if available.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook called after the component is initialized.\nSets up the review form, fetches album details, retrieves reviews, and populates lorem ipsum text.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:145\n                        \n                    \n\n\n            \n                \n                        Submits a new review for the current album.\nValidates the form before submission and updates the reviews list and average rating upon success.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paginateReviews\n                        \n                    \n                \n            \n            \n                \npaginateReviews()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:228\n                        \n                    \n\n\n            \n                \n                        Paginates the reviews list for the current page.\nUpdates the paginatedReviews array and calculates the total number of pages.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previousReviewPage\n                        \n                    \n                \n            \n            \n                \npreviousReviewPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/album.component.ts:243\n                        \n                    \n\n\n            \n                \n                        Navigates to the previous page of reviews, if available.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        album\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:35\n                        \n                    \n\n            \n                \n                    Current album details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        album_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:25\n                        \n                    \n\n            \n                \n                    List of albums retrieved from the API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:101\n                        \n                    \n\n            \n                \n                    - Service for managing user authentication and roles.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        averageRating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:50\n                        \n                    \n\n            \n                \n                    Average rating for the current album.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:97\n                        \n                    \n\n            \n                \n                    - Service for retrieving data like lorem ipsum content.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:78\n                        \n                    \n\n            \n                \n                    Indicates if the current user is an admin.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:84\n                        \n                    \n\n            \n                \n                    Indicates if the current user is logged in.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loremIpsum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:30\n                        \n                    \n\n            \n                \n                    Placeholder text for lorem ipsum content.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paginatedReviews\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:72\n                        \n                    \n\n            \n                \n                    Paginated reviews to display on the current page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviewForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:40\n                        \n                    \n\n            \n                \n                    Reactive form group for submitting reviews.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviewPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:56\n                        \n                    \n\n            \n                \n                    Current page of reviews being displayed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviews_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:45\n                        \n                    \n\n            \n                \n                    List of reviews for the current album.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reviewsPerPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:62\n                        \n                    \n\n            \n                \n                    Number of reviews displayed per page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalReviewPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/components/album.component.ts:67\n                        \n                    \n\n            \n                \n                    Total number of review pages.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ActivatedRoute, RouterOutlet } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { DataService } from '../data.service';\nimport { WebService } from '../services/web.service';\nimport { AuthService } from '../services/authService.component';\n/**\n * The `AlbumComponent` manages the display of a specific album, its reviews, and user interactions,\n * including adding, deleting, and paginating reviews. It also handles user authentication and authorization checks.\n */\n@Component({\n  selector: 'album', // The selector used to include this component in templates.\n  imports: [RouterOutlet, CommonModule, ReactiveFormsModule], // Modules used in this component's template.\n  providers: [DataService, WebService], // Services provided specifically for this component.\n  templateUrl: './album.component.html' // The associated template for this component.\n})\n\nexport class AlbumComponent {\n  /**\n   * List of albums retrieved from the API.\n   */\n  album_list: any;\n\n  /**\n   * Placeholder text for lorem ipsum content.\n   */\n  loremIpsum: any;\n\n  /**\n   * Current album details.\n   */\n  album: any;\n\n  /**\n   * Reactive form group for submitting reviews.\n   */\n  reviewForm: any;\n\n  /**\n   * List of reviews for the current album.\n   */\n  reviews_list: any;\n\n  /**\n   * Average rating for the current album.\n   */\n  averageRating: any;\n\n  /**\n   * Current page of reviews being displayed.\n   * @default 1\n   */\n  reviewPage: number = 1;\n\n  /**\n   * Number of reviews displayed per page.\n   * @default 4\n   */\n  reviewsPerPage: number = 4;\n\n  /**\n   * Total number of review pages.\n   */\n  totalReviewPages: number = 0;\n\n  /**\n   * Paginated reviews to display on the current page.\n   */\n  paginatedReviews: any[] = [];\n\n  /**\n   * Indicates if the current user is an admin.\n   * @default false\n   */\n  isAdmin: boolean = false;\n\n  /**\n   * Indicates if the current user is logged in.\n   * @default false\n   */\n  isLoggedIn: boolean = false;\n\n  /**\n   * Constructor for `AlbumComponent`.\n   * Injects necessary services and utilities for managing album data, reviews, and user authentication.\n   * \n   * @param dataService - Service for retrieving data like lorem ipsum content.\n   * @param route - Service for accessing the active route and its parameters.\n   * @param formBuilder - Service for building reactive forms.\n   * @param cdr - Service for manually triggering change detection.\n   * @param authService - Service for managing user authentication and roles.\n   * @param webService - Service for making API calls related to albums and reviews.\n   */\n  constructor(public dataService: DataService,\n    private route: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private cdr: ChangeDetectorRef,\n    public authService: AuthService,\n    private webService: WebService,\n  ) { }\n\n  /**\n   * Lifecycle hook called after the component is initialized.\n   * Sets up the review form, fetches album details, retrieves reviews, and populates lorem ipsum text.\n   */\n  ngOnInit() {\n    this.reviewForm = this.formBuilder.group({\n      username: [\"\", Validators.required],\n      review_text: [\"\", Validators.required],\n      rating: 0,\n    });\n\n    this.authService.isLoggedIn$.subscribe((loggedIn) => {\n      this.isLoggedIn = loggedIn;\n    });\n\n    this.authService.userRole$.subscribe((role) => {\n      this.isAdmin = role === 'admin'; // Set isAdmin to true if role is 'admin'\n    });\n\n    this.webService.getAlbum(this.route.snapshot.paramMap.get('id'))\n      .subscribe((response) => {\n        this.album_list = [response];\n      });\n\n    this.dataService.getLoremIpsum(1)\n      .subscribe((response: any) => {\n        this.loremIpsum = response.text.slice(0, 400);\n      });\n\n    this.webService.getReviews(this.route.snapshot.paramMap.get('id'))\n      .subscribe((response) => {\n        this.reviews_list = response;\n        this.paginateReviews();\n      });\n  }\n\n  /**\n   * Submits a new review for the current album.\n   * Validates the form before submission and updates the reviews list and average rating upon success.\n   */\n  onSubmit() {\n    if (this.reviewForm.valid) {\n      const newReview = this.reviewForm.value;\n      console.log('Submitting Review:', newReview);\n\n      const albumId = this.route.snapshot.paramMap.get('id')!;\n      this.webService.postReview(albumId, newReview).subscribe({\n        next: (reviews) => {\n          console.log('Review saved successfully:', reviews);\n          this.reviews_list = reviews; // Update the reviews list\n          this.getAverageRating(this.reviews_list); // Update the average rating\n          this.paginateReviews(); // Recalculate pagination\n        },\n        error: (error) => {\n          console.error('Error adding review:', error);\n          alert('There was an error submitting your review. Please try again.');\n        },\n      });\n\n\n      this.reviewForm.reset();\n      this.reviewForm.patchValue({ rating: 5 }); // Default rating\n    }\n  }\n\n  /**\n   * Deletes a review by its ID for the current album.\n   * Prompts the user for confirmation before performing the deletion.\n   * \n   * @param reviewId - The ID of the review to delete.\n   */\n  deleteReview(reviewId: string) {\n    const albumId = this.route.snapshot.paramMap.get('id'); // Get the current album ID\n\n    if (!albumId || !reviewId) {\n      alert('Invalid album or review ID');\n      return;\n    }\n\n    if (confirm('Are you sure you want to delete this review?')) {\n      this.webService.deleteReview(albumId, reviewId).subscribe({\n        next: (response) => {\n          alert('Review deleted successfully!');\n          this.reviews_list = this.reviews_list.filter(\n            (review: any) => review.review_id !== reviewId\n          ); // Remove the deleted review from the list\n          this.paginateReviews(); // Recalculate pagination\n          this.getAverageRating(this.reviews_list); // Update the average rating\n        },\n        error: (error) => {\n          console.error('Error deleting review:', error);\n          alert('Failed to delete review. Please try again.');\n        },\n      });\n    }\n  }\n\n  /**\n   * Calculates the average rating based on the current reviews list.\n   * \n   * @param reviews - Array of reviews to calculate the average rating from.\n   */\n  getAverageRating(reviews: any[]) {\n    console.log('Calculating average rating. Reviews:', reviews);\n\n    if (!reviews || reviews.length === 0) {\n      this.averageRating = 0;\n      return;\n    }\n\n    // Convert rating to a number before summing\n    const totalRating = reviews.reduce((sum, review) => sum + Number(review.rating), 0);\n\n    console.log('Total rating:', totalRating);\n\n    this.averageRating = Math.floor(totalRating / reviews.length); // Round down to nearest whole number\n    console.log('Updated average rating:', this.averageRating);\n  }\n\n  /**\n   * Paginates the reviews list for the current page.\n   * Updates the `paginatedReviews` array and calculates the total number of pages.\n   */\n  paginateReviews() {\n    if (this.reviews_list && this.reviews_list.length > 0) {\n      this.totalReviewPages = Math.ceil(this.reviews_list.length / this.reviewsPerPage);\n      const startIndex = (this.reviewPage - 1) * this.reviewsPerPage;\n      const endIndex = startIndex + this.reviewsPerPage;\n      this.paginatedReviews = this.reviews_list.slice(startIndex, endIndex);\n    } else {\n      this.paginatedReviews = [];\n      this.totalReviewPages = 0;\n    }\n  }\n\n  /**\n   * Navigates to the previous page of reviews, if available.\n   */\n  previousReviewPage() {\n    if (this.reviewPage > 1) {\n      this.reviewPage--;\n      this.paginateReviews();\n    }\n  }\n\n  /**\n   * Navigates to the next page of reviews, if available.\n   */\n  nextReviewPage() {\n    if (this.reviewPage \n    \n\n    \n        \n    \n        \n            @for (album of album_list; track album.name){\n\n            \n                {{album.artist}}\n                \n            \n            \n                Album - {{ album.album_title }}\n                \n                Year: {{ album.year_of_release }}\n                Genre: {{ album.genre }}\n            \n            \n                Description\n                {{loremIpsum}}\n            \n            \n                Average Rating:\n                \n                    \n                \n                {{ averageRating }}/5\n            \n            \n            \n                {{ reviews_list?.length || 0 }}\n                 Reviews:\n            \n\n            \n                 0; else noReviews\">\n                    \n                        \n                            \n                            {{ review.username }}\n                        \n                        \n                            {{ review.review_text }}\n                        \n                        \n                            Rating: {{ review.rating }}/5\n                        \n                        \n                            Delete\n                        \n                    \n\n                    \n                    \n                        \n                            \n                                Previous\n                            \n                        \n                        \n                            Page {{ reviewPage }} of {{ totalReviewPages }}\n                        \n                        \n                            \n                                Next\n                            \n                        \n                    \n                \n\n                \n                \n                    No reviews yet. Be the first to review!\n                \n            \n            }\n        \n    \n\n\n\n    \n        Leave a Review\n        \n            Please log in to Review Album.\n          \n        \n            \n                Username\n                \n            \n            \n                Please leave a review below:\n                \n            \n            \n            \n                \n                    Rate the album (5 Hearts = best)\n                \n                \n                    1 Hearts\n                    2 Hearts\n                    3 Hearts\n                    4 Hearts\n                    5 Hearts\n                \n            \n            \n                Please complete all fields\n            \n            \n                Submit\n            \n        \n    \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        @for (album of album_list; track album.name){                            {{album.artist}}                                                        Album - {{ album.album_title }}                                Year: {{ album.year_of_release }}                Genre: {{ album.genre }}                                        Description                {{loremIpsum}}                                        Average Rating:                                                                    {{ averageRating }}/5                                                    {{ reviews_list?.length || 0 }}                 Reviews:                                         0; else noReviews\">                                                                                                    {{ review.username }}                                                                            {{ review.review_text }}                                                                            Rating: {{ review.rating }}/5                                                                            Delete                                                                                                                                                                        Previous                                                                                                        Page {{ reviewPage }} of {{ totalReviewPages }}                                                                                                            Next                                                                                                                                            No reviews yet. Be the first to review!                                        }                        Leave a Review                    Please log in to Review Album.                                              Username                                                        Please leave a review below:                                                                                        Rate the album (5 Hearts = best)                                                    1 Hearts                    2 Hearts                    3 Hearts                    4 Hearts                    5 Hearts                                                        Please complete all fields                                        Submit                            '\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AlbumComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AlbumGenreComponent.html":{"url":"components/AlbumGenreComponent.html","title":"component - AlbumGenreComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AlbumGenreComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/albumGenre.component.ts\n\n\n\n    \n        Description\n    \n    \n        The AlbumGenreComponent is responsible for displaying a summary of album genres.\nIt interacts with the WebService to fetch data and utilizes authentication services for managing user access.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                DataService\n                                WebService\n                \n            \n\n\n            \n                selector\n                genre\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                                LoginComponent\n                                AuthUserComponent\n                            CommonModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./albumGenre.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authService\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                genreSummary\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DataService, webService: WebService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/albumGenre.component.ts:26\n                            \n                        \n\n                \n                    \n                            Constructor for AlbumGenreComponent.\nInjects services for managing data, making API calls, and handling authentication.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling application-wide data operations.\n\n\n                                                        \n                                                \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for interacting with the album API.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing user authentication and access.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albumGenre.component.ts:42\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called after the component is initialized.\nFetches the genre summary from the API and updates the genreSummary property.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albumGenre.component.ts:36\n                        \n                    \n\n            \n                \n                    - Service for managing user authentication and access.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albumGenre.component.ts:36\n                        \n                    \n\n            \n                \n                    - Service for handling application-wide data operations.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        genreSummary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albumGenre.component.ts:26\n                        \n                    \n\n            \n                \n                    Holds the summary of genres retrieved from the API.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { AuthUserComponent } from '../auth/authUser.component';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '@auth0/auth0-angular';\nimport { LoginComponent } from './login.component';\nimport { DataService } from '../data.service';\nimport { WebService } from '../services/web.service';\n\n/**\n * The `AlbumGenreComponent` is responsible for displaying a summary of album genres.\n * It interacts with the `WebService` to fetch data and utilizes authentication services for managing user access.\n */\n@Component({\n    selector: 'genre', // The selector used to include this component in the application.\n    imports: [RouterOutlet, LoginComponent, AuthUserComponent, CommonModule, ReactiveFormsModule], // Modules and components used in the template.\n    providers: [DataService, WebService], // Services provided specifically for this component.\n    templateUrl: './albumGenre.component.html' // The associated template file for this component.\n})\n\nexport class AlbumGenreComponent {\n    /**\n     * Holds the summary of genres retrieved from the API.\n     */\n    genreSummary: any;\n\n    /**\n     * Constructor for `AlbumGenreComponent`.\n     * Injects services for managing data, making API calls, and handling authentication.\n     * \n     * @param dataService - Service for handling application-wide data operations.\n     * @param webService - Service for interacting with the album API.\n     * @param authService - Service for managing user authentication and access.\n     */\n    constructor(public dataService: DataService, private webService: WebService, public authService: AuthService,) { }\n\n    /**\n     * Lifecycle hook that is called after the component is initialized.\n     * Fetches the genre summary from the API and updates the `genreSummary` property.\n     */\n    ngOnInit() {\n        // Fetch genre summary\n        this.webService.getGenreSummary()\n            .subscribe((response) => {\n                this.genreSummary = response; // Assuming a new property for genres\n            });\n    }\n}\n    \n\n    \n        \n    \n        Album Genres\n        \n        \n            Genre Summary\n            \n                \n                    \n                        {{ genre.genre }}\n                        Total Albums: {{ genre.count }}\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Album Genres                            Genre Summary                                                                        {{ genre.genre }}                        Total Albums: {{ genre.count }}                                                            '\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AlbumGenreComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AlbumRatingsComponent.html":{"url":"components/AlbumRatingsComponent.html","title":"component - AlbumRatingsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AlbumRatingsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/albumRatings.component.ts\n\n\n\n    \n        Description\n    \n    \n        The AlbumRatingsComponent is responsible for displaying a list of high-rated albums and their average ratings.\nIt interacts with the WebService to fetch rating data and provides utility methods for processing ratings.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                DataService\n                                WebService\n                \n            \n\n\n            \n                selector\n                ratings\n            \n\n\n            \n                imports\n                \n                            RouterModule\n                                LoginComponent\n                                AuthUserComponent\n                            CommonModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./albumRatings.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                averageRating\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                ratings\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRoundedRating\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DataService, webService: WebService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/albumRatings.component.ts:29\n                            \n                        \n\n                \n                    \n                            Constructor for AlbumRatingsComponent.\nInjects services for managing data and making API calls.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling application-wide data operations.\n\n\n                                                        \n                                                \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for interacting with the album API.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRoundedRating\n                        \n                    \n                \n            \n            \n                \ngetRoundedRating(rating: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albumRatings.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Rounds a given rating to the nearest whole number.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rating\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe rating value to round.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The rounded rating.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albumRatings.component.ts:44\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called after the component is initialized.\nFetches the list of high-rated albums from the API and assigns it to the ratings property.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        averageRating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albumRatings.component.ts:29\n                        \n                    \n\n            \n                \n                    Holds the calculated average rating for displayed albums.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albumRatings.component.ts:38\n                        \n                    \n\n            \n                \n                    - Service for handling application-wide data operations.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ratings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albumRatings.component.ts:25\n                        \n                    \n\n            \n                \n                    Holds the list of high-rated albums retrieved from the API.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthUserComponent } from '../auth/authUser.component';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login.component';\nimport { DataService } from '../data.service';\nimport { WebService } from '../services/web.service';\n\n/**\n * The `AlbumRatingsComponent` is responsible for displaying a list of high-rated albums and their average ratings.\n * It interacts with the `WebService` to fetch rating data and provides utility methods for processing ratings.\n */\n@Component({\n    selector: 'ratings', // The selector used to include this component in the application.\n    imports: [RouterModule, LoginComponent, AuthUserComponent, CommonModule, ReactiveFormsModule], // Modules and components used in the template.\n    providers: [DataService, WebService], // Services provided specifically for this component.\n    templateUrl: './albumRatings.component.html' // The associated template file for this component.\n})\n\nexport class AlbumRatingsComponent {\n    /**\n     * Holds the list of high-rated albums retrieved from the API.\n     */\n    ratings: any;\n    /**\n     * Holds the calculated average rating for displayed albums.\n     */\n    averageRating: any;\n\n    /**\n     * Constructor for `AlbumRatingsComponent`.\n     * Injects services for managing data and making API calls.\n     * \n     * @param dataService - Service for handling application-wide data operations.\n     * @param webService - Service for interacting with the album API.\n     */\n    constructor(public dataService: DataService, private webService: WebService) { }\n\n    /**\n     * Lifecycle hook that is called after the component is initialized.\n     * Fetches the list of high-rated albums from the API and assigns it to the `ratings` property.\n     */\n    ngOnInit() {\n        // Fetch high-rated albums\n        this.webService.getHighRated()\n            .subscribe((response) => {\n                this.ratings = response;\n            });\n    }\n\n    /**\n     * Rounds a given rating to the nearest whole number.\n     * \n     * @param rating - The rating value to round.\n     * @returns The rounded rating.\n     */\n    getRoundedRating(rating: number): number {\n        return Math.round(rating);\n    }\n    \n}\n    \n\n    \n        \n    \n        \n        \n            High-Rated Albums\n            Explore the current High-Rated Albums listed today\n            \n            \n                \n                    \n                        {{ rating.album_title }}\n                    \n                    \n                        Average Rating:\n                        \n                            \n                                \n                            \n                            {{ rating.average_rating | number:'1.1-1' }}/5\n                        \n                    \n                    \n                        by {{ rating.artist }}\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                High-Rated Albums            Explore the current High-Rated Albums listed today                                                                                    {{ rating.album_title }}                                                                Average Rating:                                                                                                                                            {{ rating.average_rating | number:\\'1.1-1\\' }}/5                                                                                        by {{ rating.artist }}                                                            '\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AlbumRatingsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AlbumsComponent.html":{"url":"components/AlbumsComponent.html","title":"component - AlbumsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AlbumsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/albums.component.ts\n\n\n\n    \n        Description\n    \n    \n        The AlbumsComponent is responsible for managing the list of albums.\nIt supports CRUD operations (create, read, update, delete) and provides features such as pagination and search.\nIt also integrates with user authentication and role management.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                DataService\n                                WebService\n                \n            \n\n\n            \n                selector\n                albums\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                            RouterModule\n                            CommonModule\n                            FormsModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./albums.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addAlbumForm\n                            \n                            \n                                album_list\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                editingAlbumId\n                            \n                            \n                                isAdmin\n                            \n                            \n                                page\n                            \n                            \n                                searchQuery\n                            \n                            \n                                searchResults\n                            \n                            \n                                showAddAlbumForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteAlbum\n                            \n                            \n                                editAlbum\n                            \n                            \n                                isIncomplete\n                            \n                            \n                                isInvalid\n                            \n                            \n                                nextPage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAddAlbum\n                            \n                            \n                                onCancelForm\n                            \n                            \n                                previousPage\n                            \n                            \n                                searchAlbums\n                            \n                            \n                                toggleAddAlbumForm\n                            \n                            \n                                updateAlbum\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DataService, webService: WebService, formBuilder: FormBuilder, authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/albums.component.ts:65\n                            \n                        \n\n                \n                    \n                            Constructor for AlbumsComponent.\nInitializes the addAlbumForm and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for application-wide data operations.\n\n\n                                                        \n                                                \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for interacting with the album API.\n\n\n                                                        \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for building reactive forms.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing user authentication and roles.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAlbum\n                        \n                    \n                \n            \n            \n                \ndeleteAlbum(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:218\n                        \n                    \n\n\n            \n                \n                        Deletes an album by its ID after user confirmation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the album to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editAlbum\n                        \n                    \n                \n            \n            \n                \neditAlbum(albumId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:184\n                        \n                    \n\n\n            \n                \n                        Enables edit mode for a specific album by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the album to edit.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isIncomplete\n                        \n                    \n                \n            \n            \n                \nisIncomplete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:170\n                        \n                    \n\n\n            \n                \n                        Checks if the add album form is incomplete.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if any required form field is invalid, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInvalid\n                        \n                    \n                \n            \n            \n                \nisInvalid(control: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:158\n                        \n                    \n\n\n            \n                \n                        Checks if a specific form control is invalid and touched.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the form control to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the control is invalid and touched, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextPage\n                        \n                    \n                \n            \n            \n                \nnextPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:251\n                        \n                    \n\n\n            \n                \n                        Navigates to the next page of albums if available.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called after the component is initialized.\nLoads the album list and checks the user's admin role.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAddAlbum\n                        \n                    \n                \n            \n            \n                \nonAddAlbum()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Submits the form to add a new album.\nIf the form is valid, the album is sent to the API, and the list is refreshed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCancelForm\n                        \n                    \n                \n            \n            \n                \nonCancelForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Cancels the add album form and resets its state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previousPage\n                        \n                    \n                \n            \n            \n                \npreviousPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:236\n                        \n                    \n\n\n            \n                \n                        Navigates to the previous page of albums if available.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchAlbums\n                        \n                    \n                \n            \n            \n                \nsearchAlbums()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:269\n                        \n                    \n\n\n            \n                \n                        Searches for albums based on the user's query.\nIf the query is empty, reloads the full album list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleAddAlbumForm\n                        \n                    \n                \n            \n            \n                \ntoggleAddAlbumForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:140\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the add album form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAlbum\n                        \n                    \n                \n            \n            \n                \nupdateAlbum(album: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/albums.component.ts:194\n                        \n                    \n\n\n            \n                \n                        Updates an album's details.\nSends the updated album data to the API and refreshes the album list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                album\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe album data to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addAlbumForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:48\n                        \n                    \n\n            \n                \n                    The reactive form group for adding a new album.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        album_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:27\n                        \n                    \n\n            \n                \n                    The list of albums retrieved from the API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:77\n                        \n                    \n\n            \n                \n                    - Service for application-wide data operations.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editingAlbumId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:53\n                        \n                    \n\n            \n                \n                    The ID of the album currently being edited.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:65\n                        \n                    \n\n            \n                \n                    A flag to indicate if the current user has admin privileges.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:33\n                        \n                    \n\n            \n                \n                    The current page of albums being displayed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchQuery\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:38\n                        \n                    \n\n            \n                \n                    The user's search query for filtering albums.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchResults\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:43\n                        \n                    \n\n            \n                \n                    The results of the search query.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showAddAlbumForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/components/albums.component.ts:59\n                        \n                    \n\n            \n                \n                    A flag to track whether the add album form is visible.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet, RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms'; // For ngModel\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { DataService } from '../data.service';\nimport { WebService } from '../services/web.service';\nimport { AuthService } from '../services/authService.component';\n\n/**\n * The `AlbumsComponent` is responsible for managing the list of albums.\n * It supports CRUD operations (create, read, update, delete) and provides features such as pagination and search.\n * It also integrates with user authentication and role management.\n */\n@Component({\n  selector: 'albums', // The selector used to include this component in the application.\n  imports: [RouterOutlet, RouterModule, CommonModule, FormsModule, ReactiveFormsModule], // Modules and components used in the template.\n  providers: [DataService, WebService], // Services provided specifically for this component.\n  templateUrl: './albums.component.html' // The associated template file for this component.\n})\n\nexport class AlbumsComponent {\n  /**\n   * The list of albums retrieved from the API.\n   */\n  album_list: any;\n\n  /**\n   * The current page of albums being displayed.\n   * @default 1\n   */\n  page: number = 1;\n\n  /**\n   * The user's search query for filtering albums.\n   */\n  searchQuery: string = '';\n\n  /**\n   * The results of the search query.\n   */\n  searchResults: any;\n\n  /**\n   * The reactive form group for adding a new album.\n   */\n  addAlbumForm: any;\n\n  /**\n   * The ID of the album currently being edited.\n   */\n  editingAlbumId: string | null = null;\n\n  /**\n   * A flag to track whether the add album form is visible.\n   * @default false\n   */\n  showAddAlbumForm: boolean = false;\n\n  /**\n   * A flag to indicate if the current user has admin privileges.\n   * @default false\n   */\n  isAdmin: boolean = false;\n\n  /**\n   * Constructor for `AlbumsComponent`.\n   * Initializes the `addAlbumForm` and injects required services.\n   * \n   * @param dataService - Service for application-wide data operations.\n   * @param webService - Service for interacting with the album API.\n   * @param formBuilder - Service for building reactive forms.\n   * @param authService - Service for managing user authentication and roles.\n   * @param router - Angular Router for navigation.\n   */\n  constructor(public dataService: DataService,\n    private webService: WebService,\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,) {\n    // Initialize the form group for adding a new album\n    this.addAlbumForm = this.formBuilder.group({\n      artist: ['', Validators.required],\n      album_title: ['', Validators.required],\n      year_of_release: [\n        '',\n        [Validators.required, Validators.min(1900), Validators.max(new Date().getFullYear())],\n      ],\n      genre: ['', Validators.required],\n    });\n  }\n\n  /**\n   * Lifecycle hook that is called after the component is initialized.\n   * Loads the album list and checks the user's admin role.\n   */\n  ngOnInit() {\n    if (sessionStorage['page']) {\n      this.page = Number(sessionStorage['page']);\n    }\n\n    this.authService.userRole$.subscribe((role) => {\n      this.isAdmin = role === 'admin'; // Set isAdmin to true if role is 'admin'\n    });\n\n    this.webService.getAlbums(1).subscribe((response) => {\n      this.album_list = response;\n    });\n\n  }\n\n  /**\n   * Submits the form to add a new album.\n   * If the form is valid, the album is sent to the API, and the list is refreshed.\n   */\n  onAddAlbum() {\n    if (this.addAlbumForm.valid) {\n      const newAlbum = this.addAlbumForm.value;\n      console.log('Adding Album:', newAlbum); // Debug log\n      this.webService.addAlbum(newAlbum).subscribe({\n        next: (response) => {\n          console.log('Album added successfully:', response);\n          alert('Album added successfully!');\n          this.album_list.push(response.data); // Update the local list\n          this.addAlbumForm.reset(); // Reset form\n          this.ngOnInit(); // Refresh album list\n        },\n        error: (error) => {\n          console.error('Error adding album:', error); // Debug log\n          alert('Failed to add album. Please try again.');\n        },\n      });\n    }\n  }\n\n  /**\n   * Toggles the visibility of the add album form.\n   */\n  toggleAddAlbumForm() {\n    this.showAddAlbumForm = !this.showAddAlbumForm;\n  }\n\n  /**\n   * Cancels the add album form and resets its state.\n   */\n  onCancelForm() {\n    this.addAlbumForm.reset(); // Clear all input fields\n    this.showAddAlbumForm = false; // Collapse the form\n  }\n\n  /**\n   * Checks if a specific form control is invalid and touched.\n   * \n   * @param control - The name of the form control to check.\n   * @returns True if the control is invalid and touched, false otherwise.\n   */\n  isInvalid(control: string): boolean {\n    return (\n      this.addAlbumForm.controls[control].invalid &&\n      this.addAlbumForm.controls[control].touched\n    );\n  }\n\n  /**\n   * Checks if the add album form is incomplete.\n   * \n   * @returns True if any required form field is invalid, false otherwise.\n   */\n  isIncomplete(): boolean {\n    return (\n      this.isInvalid('artist') ||\n      this.isInvalid('album_title') ||\n      this.isInvalid('year_of_release') ||\n      this.isInvalid('genre')\n    );\n  }\n\n  /**\n   * Enables edit mode for a specific album by its ID.\n   * \n   * @param albumId - The ID of the album to edit.\n   */\n  editAlbum(albumId: string) {\n    this.editingAlbumId = albumId; // Enable edit mode\n  }\n\n  /**\n   * Updates an album's details.\n   * Sends the updated album data to the API and refreshes the album list.\n   * \n   * @param album - The album data to update.\n   */\n  updateAlbum(album: any) {\n    this.webService.updateAlbum(album._id, {\n      artist: album.artist,\n      album_title: album.album_title,\n      year_of_release: album.year_of_release,\n      genre: album.genre,\n    }).subscribe({\n      next: (response) => {\n        alert('Album updated successfully!');\n        this.editingAlbumId = null; // Exit edit mode\n        this.ngOnInit(); // Refresh album list\n      },\n      error: (error) => {\n        console.error('Error updating album:', error);\n        alert('Failed to update album.');\n      },\n    });\n  }\n\n  /**\n   * Deletes an album by its ID after user confirmation.\n   * \n   * @param id - The ID of the album to delete.\n   */\n  deleteAlbum(id: string) {\n    if (confirm('Are you sure you want to delete this album?')) {\n      this.webService.deleteAlbum(id).subscribe({\n        next: (response) => {\n          alert('Album deleted successfully!');\n          this.ngOnInit(); // Refresh album list\n        },\n        error: (error) => {\n          console.error('Error deleting album:', error);\n          alert('Failed to delete album. Please try again.');\n        },\n      });\n    }\n  }\n\n  /**\n   * Navigates to the previous page of albums if available.\n   */\n  previousPage() {\n    if (this.page > 1) {\n      this.page = this.page - 1;\n      sessionStorage['page'] = this.page;\n\n      this.webService.getAlbums(this.page)\n        .subscribe((response) => {\n          this.album_list = response\n        })\n    }\n  }\n\n  /**\n   * Navigates to the next page of albums if available.\n   */\n  nextPage() {\n    this.webService.getAlbums(this.page + 1).subscribe((response) => {\n      if (response && response.length > 0) {\n        this.page += 1; // Increment the page only if there are albums on the next page\n        sessionStorage['page'] = this.page;\n        this.album_list = response;\n      } else {\n        console.log('No more albums on the next page.');\n      }\n    }, (error) => {\n      console.error('Error fetching the next page of albums:', error);\n    });\n  }\n\n  /**\n   * Searches for albums based on the user's query.\n   * If the query is empty, reloads the full album list.\n   */\n  searchAlbums(): void {\n    if (this.searchQuery.trim()) {\n      // Fetch albums based on the search query\n      this.webService.searchAlbum(this.searchQuery).subscribe({\n        next: (data: any[]) => {\n          this.album_list = data;\n        }\n      });\n    } else {\n      // Fetch all albums if search query is empty\n      this.router.navigate(['/albums']); // Navigate back to albums page\n    }\n  }\n}\n\n    \n\n    \n        \n    The Greatest Albums Of All Time\n\n    \n        \n            \n        \n    \n\n    \n        \n        \n            {{ showAddAlbumForm ? 'Close' : 'Add Album' }}\n        \n\n        \n        \n            Add a New Album\n            \n                \n                    Artist\n                    \n                \n                \n                    Album Title\n                    \n                \n                \n                    Year of Release\n                    \n                \n                \n                    Genre\n                    \n                \n                \n                    Submit Album\n                \n                \n                \n                    Cancel\n                \n            \n        \n    \n\n    \n        \n            \n                \n                    \n                        \n                    \n                    \n                        {{ album.artist }}\n                    \n                \n                \n                    Album\n                    \n                    \n                        \n                    \n                    \n                        \n                        {{ album.album_title }}\n                    \n                \n                \n                    Year -\n                    \n                        \n                    \n                    \n                        {{ album.year_of_release }}\n                    \n                \n                \n                    View Details\n                    \n                    \n                        Save\n                        Edit\n                        Delete\n                    \n                \n            \n        \n    \n    \n        \n            \n                Previous\n            \n        \n        \n            Showing Page {{this.page}}\n            of {{this.dataService.getLastPageNumber()}}\n        \n        \n            \n                Next\n            \n        \n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    The Greatest Albums Of All Time                                                                    {{ showAddAlbumForm ? \\'Close\\' : \\'Add Album\\' }}                                    Add a New Album                                                Artist                                                                        Album Title                                                                        Year of Release                                                                        Genre                                                                        Submit Album                                                                    Cancel                                                                                                                                                                                            {{ album.artist }}                                                                        Album                                                                                                                                                        {{ album.album_title }}                                                                        Year -                                                                                                            {{ album.year_of_release }}                                                                        View Details                                                                Save                        Edit                        Delete                                                                                                    Previous                                        Showing Page {{this.page}}            of {{this.dataService.getLastPageNumber()}}                                            Next                        '\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AlbumsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        The root component of the application.\nThis component serves as the main entry point for the application,\nproviding the structure and initialization logic.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                DataService\n                \n            \n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                AlbumsComponent\n                                NavComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DataService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor for AppComponent.\nInjects services required by the component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe DataService used for populating data during initialization.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe AuthService used to manage user authentication status.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called after the component is initialized.\nPerforms initial setup tasks such as populating reviews and checking authentication status.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AlbumsFE'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:25\n                        \n                    \n\n            \n                \n                    The title of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { AuthService } from './services/authService.component';\nimport { AlbumsComponent } from './components/albums.component';\nimport { NavComponent } from './components/nav.component';\nimport { DataService } from './data.service';\n\n/**\n * The root component of the application.\n * This component serves as the main entry point for the application, \n * providing the structure and initialization logic.\n */\n@Component({\n  selector: 'app-root', // The selector used to include this component in the application.\n  standalone: true, // Marks this component as standalone, allowing it to be used without being declared in a module.\n  imports: [RouterOutlet, AlbumsComponent, NavComponent], // Components and directives used in the template.\n  providers: [DataService], // Services provided at the root component level.\n  templateUrl: './app.component.html' // The template file for this component.\n})\nexport class AppComponent {\n  /**\n  * The title of the application.\n  * @type {string}\n  */\n  title = 'AlbumsFE';\n\n  /**\n   * Constructor for AppComponent.\n   * Injects services required by the component.\n   * \n   * @param dataService - The DataService used for populating data during initialization.\n   * @param authService - The AuthService used to manage user authentication status.\n   */\n  constructor(private dataService: DataService, private authService: AuthService) { }\n\n  /**\n   * Lifecycle hook that is called after the component is initialized.\n   * Performs initial setup tasks such as populating reviews and checking authentication status.\n   */\n  ngOnInit() {\n     // Populate reviews from the data service.\n    this.dataService.populateReviews();\n\n    // Check the user's authentication status through the AuthService.\n    this.authService.checkAuthentication();\n  }\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/authService.component.ts\n        \n\n\n            \n                Description\n            \n            \n                The AuthService manages user authentication and role-based access.\nIt interacts with the server for login and logout operations and maintains authentication state.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiUrl\n                            \n                            \n                                isAuthenticated$\n                            \n                            \n                                isLoggedIn$\n                            \n                            \n                                    Private\n                                isLoggedInSubject\n                            \n                            \n                                userRole$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAuthentication\n                            \n                            \n                                getUserRole\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/authService.component.ts:36\n                            \n                        \n\n                \n                    \n                            Constructor for AuthService.\nInjects the HttpClient for making HTTP requests.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular HttpClient used to perform HTTP requests.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAuthentication\n                        \n                    \n                \n            \n            \n                \ncheckAuthentication()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/authService.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Checks the current authentication state by verifying the presence of a token in localStorage.\nUpdates the authentication and role observables based on the stored values.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserRole\n                        \n                    \n                \n            \n            \n                \ngetUserRole()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/authService.component.ts:104\n                        \n                    \n\n\n            \n                \n                        Returns an Observable of the current user's role.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits the current user role.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/authService.component.ts:95\n                        \n                    \n\n\n            \n                \n                        Returns an Observable of the current authentication state.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits the current authentication state.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/authService.component.ts:55\n                        \n                    \n\n\n            \n                \n                        Handles user login by sending credentials to the server.\nOn successful login, saves the authentication token and user role to localStorage\nand updates the authentication state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe username provided by the user.\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password provided by the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of the login response.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/authService.component.ts:71\n                        \n                    \n\n\n            \n                \n                        Logs the user out by clearing the authentication token and role from localStorage.\nUpdates the authentication and role observables to reflect the logged-out state.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://127.0.0.1:5000'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/authService.component.ts:16\n                        \n                    \n\n            \n                \n                    The base URL of the Flask server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/authService.component.ts:21\n                        \n                    \n\n            \n                \n                    Observable that tracks whether the user is authenticated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoggedIn$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.isLoggedInSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/authService.component.ts:36\n                        \n                    \n\n            \n                \n                    Public Observable derived from isLoggedInSubject.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isLoggedInSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/authService.component.ts:31\n                        \n                    \n\n            \n                \n                    Private subject that tracks login state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/app/services/authService.component.ts:26\n                        \n                    \n\n            \n                \n                    Observable that tracks the current user's role (e.g., 'admin' or 'user').\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n\n/**\n * The `AuthService` manages user authentication and role-based access.\n * It interacts with the server for login and logout operations and maintains authentication state.\n */\n@Injectable({\n  providedIn: 'root', // This service is provided at the root level, making it available throughout the app.\n})\nexport class AuthService {\n  /**\n   * The base URL of the Flask server.\n   */\n  private apiUrl = 'http://127.0.0.1:5000';\n\n  /**\n   * Observable that tracks whether the user is authenticated.\n   */\n  isAuthenticated$ = new BehaviorSubject(false);\n\n  /**\n   * Observable that tracks the current user's role (e.g., 'admin' or 'user').\n   */\n  userRole$ = new BehaviorSubject('');\n\n  /**\n   * Private subject that tracks login state.\n   */\n  private isLoggedInSubject = new BehaviorSubject(false);\n\n  /**\n   * Public Observable derived from `isLoggedInSubject`.\n   */\n  isLoggedIn$: Observable = this.isLoggedInSubject.asObservable();\n\n  /**\n   * Constructor for `AuthService`.\n   * Injects the `HttpClient` for making HTTP requests.\n   * \n   * @param http - The Angular HttpClient used to perform HTTP requests.\n   */\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Handles user login by sending credentials to the server.\n   * On successful login, saves the authentication token and user role to localStorage\n   * and updates the authentication state.\n   * \n   * @param username - The username provided by the user.\n   * @param password - The password provided by the user.\n   * @returns An Observable of the login response.\n   */\n  login(username: string, password: string): Observable {\n    return this.http.post(`${this.apiUrl}/auth/login`, { username, password }).pipe(\n      tap((response: any) => {\n        localStorage.setItem('token', response.token); // Save token in localStorage\n        localStorage.setItem('role', response.role);  // Save role in localStorage\n        this.isLoggedInSubject.next(true);\n        this.isAuthenticated$.next(true);\n        this.userRole$.next(response.role); // Emit the role\n      })\n    );\n  }\n\n  /**\n   * Logs the user out by clearing the authentication token and role from localStorage.\n   * Updates the authentication and role observables to reflect the logged-out state.\n   */\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n    this.isLoggedInSubject.next(false);\n    this.isAuthenticated$.next(false);\n    this.userRole$.next('');\n  }\n\n  /**\n   * Checks the current authentication state by verifying the presence of a token in localStorage.\n   * Updates the authentication and role observables based on the stored values.\n   */\n  checkAuthentication(): void {\n    const token = localStorage.getItem('token');\n    const role = localStorage.getItem('role');\n    this.isAuthenticated$.next(!!token); // Set authenticated if token exists\n    this.userRole$.next(role || ''); // Emit role if it exists\n  }\n\n  /**\n   * Returns an Observable of the current authentication state.\n   * \n   * @returns An Observable that emits the current authentication state.\n   */\n  isAuthenticated(): Observable {\n    return this.isAuthenticated$.asObservable();\n  }\n\n  /**\n   * Returns an Observable of the current user's role.\n   * \n   * @returns An Observable that emits the current user role.\n   */\n  getUserRole(): Observable {\n    return this.userRole$.asObservable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AuthUserComponent.html":{"url":"components/AuthUserComponent.html","title":"component - AuthUserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AuthUserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/auth/authUser.component.ts\n\n\n\n    \n        Description\n    \n    \n        The AuthUserComponent is responsible for displaying the authenticated user's profile information.\nIt uses the Auth0 AuthService to retrieve and display user authentication details.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                user-profile\n            \n\n\n            \n                imports\n                \n                            AsyncPipe\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                authUser.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                auth\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/auth/authUser.component.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for AuthUserComponent.\nInjects the AuthService to access authentication methods and user profile data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Auth0 Angular AuthService instance, used to manage user authentication and retrieve user details.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/auth/authUser.component.ts:24\n                        \n                    \n\n            \n                \n                    - The Auth0 Angular AuthService instance, used to manage user authentication and retrieve user details.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from \"@angular/core\";\nimport { AuthService } from \"@auth0/auth0-angular\";\nimport { AsyncPipe } from \"@angular/common\";\nimport { CommonModule } from \"@angular/common\";\n\n/**\n * The `AuthUserComponent` is responsible for displaying the authenticated user's profile information.\n * It uses the Auth0 `AuthService` to retrieve and display user authentication details.\n */\n@Component({\n    selector: 'user-profile', // The selector used to include this component in the application.\n    templateUrl: 'authUser.component.html', // The template file associated with this component.\n    imports: [AsyncPipe, CommonModule] // Imports used within this component's template.\n})\n\nexport class AuthUserComponent {\n\n    /**\n     * Constructor for `AuthUserComponent`.\n     * Injects the `AuthService` to access authentication methods and user profile data.\n     * \n     * @param auth - The Auth0 Angular AuthService instance, used to manage user authentication and retrieve user details.\n     */\n    constructor(public auth: AuthService) { }\n}\n    \n\n    \n        \n    {{user.name}}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{user.name}}'\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AuthUserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataService.html":{"url":"injectables/DataService.html","title":"injectable - DataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/data.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The DataService provides functionality for managing and retrieving album data from a local JSON file.\nIt also integrates with external APIs for generating lorem ipsum text and supports adding reviews to albums.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                pageSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlbum\n                            \n                            \n                                getAlbums\n                            \n                            \n                                getLastPageNumber\n                            \n                            \n                                getLoremIpsum\n                            \n                            \n                                populateReviews\n                            \n                            \n                                postReview\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/data.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for DataService.\nInjects the HttpClient for making HTTP requests.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular HttpClient used to perform HTTP requests.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlbum\n                        \n                    \n                \n            \n            \n                \ngetAlbum(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Retrieves a specific album by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the album.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                An array containing the album with the specified ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAlbums\n                        \n                    \n                \n            \n            \n                \ngetAlbums(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Retrieves a page of albums from the JSON data based on the given page number.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An array of albums for the specified page.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLastPageNumber\n                        \n                    \n                \n            \n            \n                \ngetLastPageNumber()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Calculates the total number of pages based on the size of the album data.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The total number of pages.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLoremIpsum\n                        \n                    \n                \n            \n            \n                \ngetLoremIpsum(paragraphs: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Fetches lorem ipsum text from an external API.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paragraphs\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of paragraphs of lorem ipsum text to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable containing the response from the API.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        populateReviews\n                        \n                    \n                \n            \n            \n                \npopulateReviews()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Populates the JSON data with random reviews using lorem ipsum text.\nMakes use of the getLoremIpsum method to fetch lorem ipsum content.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postReview\n                        \n                    \n                \n            \n            \n                \npostReview(id: string, review: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Adds a new review to the album with the specified ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the album to which the review will be added.\n\n\n                                            \n                                        \n                                        \n                                                review\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe review data to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable indicating the success of the operation.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 11\n                    \n                \n                    \n                        \n                                Defined in src/app/data.service.ts:19\n                        \n                    \n\n            \n                \n                    The number of albums displayed per page.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport jsonData from '../assets/albumdb.albums.json'\n\n/**\n * The `DataService` provides functionality for managing and retrieving album data from a local JSON file.\n * It also integrates with external APIs for generating lorem ipsum text and supports adding reviews to albums.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService{\n\n    /**\n     * The number of albums displayed per page.\n     * @default 11\n     */\n    pageSize: number = 11;\n\n    /**\n     * Constructor for `DataService`.\n     * Injects the `HttpClient` for making HTTP requests.\n     * \n     * @param http - The Angular HttpClient used to perform HTTP requests.\n     */\n    constructor(private http: HttpClient){}\n\n    /**\n     * Retrieves a page of albums from the JSON data based on the given page number.\n     * \n     * @param page - The page number to retrieve.\n     * @returns An array of albums for the specified page.\n     */\n    getAlbums(page: number){\n        let pageStart = (page - 1) * this.pageSize;\n        let pageEnd = pageStart + this.pageSize;\n        return jsonData.slice(pageStart, pageEnd);\n    }\n\n    /**\n     * Calculates the total number of pages based on the size of the album data.\n     * \n     * @returns The total number of pages.\n     */\n    getLastPageNumber(){\n        return Math.ceil(jsonData.length / this.pageSize);\n    }\n\n    /**\n     * Retrieves a specific album by its ID.\n     * \n     * @param id - The unique ID of the album.\n     * @returns An array containing the album with the specified ID.\n     */\n    getAlbum(id: any){\n        let dataToReturn: any[] = [];\n        jsonData.forEach(function(album){\n            if(album['_id']['$oid'] == id){\n                dataToReturn.push(album)\n            }\n        })\n        return dataToReturn;\n    }\n\n    /**\n     * Populates the JSON data with random reviews using lorem ipsum text.\n     * Makes use of the `getLoremIpsum` method to fetch lorem ipsum content.\n     */\n    populateReviews(){\n        let loremIpsum = \"\";\n\n        this.getLoremIpsum(1).subscribe((response: any) => {\n\n            loremIpsum = response.text;\n\n            jsonData.forEach(function(album){\n                let numReviews = Math.floor(Math.random() * 10);\n                for (var i=0; i {\n\n        let API_key = 'OTICg67nm4BTJAj3FaYxKg==w8YD3uEtrTX2s8FV';\n        return this.http.get(\n            'https://api.api-ninjas.com/v1/loremipsum?paragraphs=' + paragraphs,\n            {headers: {'X-Api-Key': API_key}}\n        );\n    }\n\n    /**\n     * Adds a new review to the album with the specified ID.\n     * \n     * @param id - The unique ID of the album to which the review will be added.\n     * @param review - The review data to add.\n     * @returns An Observable indicating the success of the operation.\n     */\n    postReview(id: string, review: any): Observable {\n        return new Observable((observer) => {\n          jsonData.forEach((album) => {\n            if (album['_id']['$oid'] === id) {\n                album['reviews'].push(review);\n              console.log('New review added to jsonData:', review); // Log here\n              observer.next({ success: true });\n              observer.complete();\n            }\n          });\n        });\n      }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomeComponent.html":{"url":"components/HomeComponent.html","title":"component - HomeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HomeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/home.component.ts\n\n\n\n    \n        Description\n    \n    \n        The HomeComponent serves as the main landing page of the application.\nIt provides navigation and integrates authentication-related components.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                home\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                                LoginComponent\n                                AuthUserComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./home.component.html\n            \n\n\n\n            \n                styleUrl\n                ./home.component.css\n            \n\n\n\n\n\n        \n    \n\n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/components/home.component.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for HomeComponent.\nCurrently, this component does not require additional services or initialization logic.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { AuthUserComponent } from '../auth/authUser.component';\nimport { LoginComponent } from './login.component';\n\n/**\n * The `HomeComponent` serves as the main landing page of the application.\n * It provides navigation and integrates authentication-related components.\n */\n@Component({\n  selector: 'home', // The selector used to include this component in the application.\n  imports: [RouterOutlet, LoginComponent, AuthUserComponent], // Modules and components used in the template.\n  templateUrl: './home.component.html', // The associated template file for this component.\n  styleUrl: './home.component.css' // The associated stylesheet for styling this component.\n})\n\nexport class HomeComponent {\n  /**\n   * Constructor for `HomeComponent`.\n   * Currently, this component does not require additional services or initialization logic.\n   */\n  constructor(){}\n}\n\n    \n\n    \n        \n    \n        \n            Welcome to the Greatest Albums of All Time\n        \n        💽🎧\n        \n    \n    \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Welcome to the Greatest Albums of All Time                💽🎧                '\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HomeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/login.component.ts\n\n\n\n    \n        Description\n    \n    \n        The LoginComponent handles the user login functionality.\nIt provides a form for entering credentials and interacts with the AuthService to authenticate the user.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n\n            \n                imports\n                \n                            FormsModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/login.component.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor for LoginComponent.\nInjects the AuthService for handling authentication and Router for navigation.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing authentication.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation after successful login.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onLogin\n                        \n                    \n                \n            \n            \n                \nonLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/login.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Handles the login process when the user submits the login form.\nCalls the AuthService to authenticate the user and navigates to the home page upon success.\nDisplays an error message if the login attempt fails.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/login.component.ts:30\n                        \n                    \n\n            \n                \n                    The error message displayed if login fails.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/login.component.ts:25\n                        \n                    \n\n            \n                \n                    The password entered by the user in the login form.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/login.component.ts:20\n                        \n                    \n\n            \n                \n                    The username entered by the user in the login form.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms'; // For ngModel\nimport { AuthService } from '../services/authService.component';\n\n/**\n * The `LoginComponent` handles the user login functionality.\n * It provides a form for entering credentials and interacts with the `AuthService` to authenticate the user.\n */\n@Component({\n  selector: 'app-login', // The selector used to include this component in the application.\n  imports: [FormsModule, ReactiveFormsModule], // Modules used in the template for form handling.\n  templateUrl: './login.component.html', // The associated template file for this component.\n  styleUrl: './login.component.css' // The associated stylesheet for styling this component.\n})\nexport class LoginComponent {\n  /**\n   * The username entered by the user in the login form.\n   */\n  username: string = '';\n\n  /**\n   * The password entered by the user in the login form.\n   */\n  password: string = '';\n\n  /**\n   * The error message displayed if login fails.\n   */\n  errorMessage: string = '';\n\n  /**\n   * Constructor for `LoginComponent`.\n   * Injects the `AuthService` for handling authentication and `Router` for navigation.\n   * \n   * @param authService - Service for managing authentication.\n   * @param router - Angular Router for navigation after successful login.\n   */\n  constructor(private authService: AuthService, private router: Router) { }\n\n  /**\n   * Handles the login process when the user submits the login form.\n   * Calls the `AuthService` to authenticate the user and navigates to the home page upon success.\n   * Displays an error message if the login attempt fails.\n   */\n  onLogin(): void {\n    this.authService.login(this.username, this.password).subscribe(\n      (response) => {\n        console.log('Login successful', response);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        console.error('Login failed', error);\n        this.errorMessage = 'Invalid username or password';\n      }\n    );\n  }\n\n}\n\n    \n\n    \n        \n  \n    Log In\n    \n      \n        Username\n        \n      \n      \n        Password\n        \n      \n      {{ errorMessage }}\n      Log In\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Log In                  Username                            Password                    {{ errorMessage }}      Log In      '\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavComponent.html":{"url":"components/NavComponent.html","title":"component - NavComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/nav.component.ts\n\n\n\n    \n        Description\n    \n    \n        The NavComponent is responsible for managing the application's navigation.\nIt provides authentication status display, user role handling, and navigation options based on the user's state.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                navigation\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                            RouterModule\n                                LoginComponent\n                                AuthUserComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./nav.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isAuthenticated\n                            \n                            \n                                userRole\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleAuth\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/nav.component.ts:28\n                            \n                        \n\n                \n                    \n                            Constructor for NavComponent.\nInjects the AuthService for authentication management and the Router for navigation.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing authentication and user roles.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular Router for navigation.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleAuth\n                        \n                    \n                \n            \n            \n                \nhandleAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/nav.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Handles authentication actions such as login and logout.\nIf the user is authenticated, logs out and redirects to the home page.\nIf not authenticated, navigates to the login page.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/nav.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook called after the component is initialized.\nSubscribes to authentication and role updates from the AuthService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/components/nav.component.ts:23\n                        \n                    \n\n            \n                \n                    Tracks whether the user is currently authenticated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/nav.component.ts:28\n                        \n                    \n\n            \n                \n                    Stores the role of the currently authenticated user (e.g., 'admin' or 'user').\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet, RouterModule, Router } from '@angular/router';\nimport { LoginComponent } from './login.component';\nimport { AuthUserComponent } from '../auth/authUser.component';\nimport { AuthService } from '../services/authService.component';\n\n/**\n * The `NavComponent` is responsible for managing the application's navigation.\n * It provides authentication status display, user role handling, and navigation options based on the user's state.\n */\n@Component({\n  selector: 'navigation', // The selector used to include this component in the application.\n  imports: [RouterOutlet, RouterModule, LoginComponent, AuthUserComponent], // Modules and components used in the template.\n  templateUrl: './nav.component.html' // The associated template file for this component.\n})\n\nexport class NavComponent {\n\n  /**\n   * Tracks whether the user is currently authenticated.\n   * @default false\n   */\n  isAuthenticated: boolean = false;\n\n  /**\n   * Stores the role of the currently authenticated user (e.g., 'admin' or 'user').\n   */\n  userRole: string = '';\n\n  /**\n   * Constructor for `NavComponent`.\n   * Injects the `AuthService` for authentication management and the `Router` for navigation.\n   * \n   * @param authService - Service for managing authentication and user roles.\n   * @param router - Angular Router for navigation.\n   */\n  constructor(private authService: AuthService, private router: Router) {}\n\n  /**\n   * Lifecycle hook called after the component is initialized.\n   * Subscribes to authentication and role updates from the `AuthService`.\n   */\n  ngOnInit(): void {\n     // Subscribe to authentication and role changes\n     this.authService.isAuthenticated$.subscribe((status) => {\n      this.isAuthenticated = status;\n    });\n\n    this.authService.userRole$.subscribe((role) => {\n      this.userRole = role;\n    });\n  }\n\n  /**\n   * Handles authentication actions such as login and logout.\n   * If the user is authenticated, logs out and redirects to the home page.\n   * If not authenticated, navigates to the login page.\n   */\n  handleAuth(): void {\n    if (this.isAuthenticated) {\n      this.authService.logout();\n      this.router.navigate(['/']); // Redirect to home after logout\n    } else {\n      this.router.navigate(['/login']);\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        💽 Album Directory\n    \n    \n        \n            Home\n        \n        \n            Albums\n        \n        \n            Ratings Summary\n        \n        \n            Genre Summary\n        \n        \n            \n                {{ isAuthenticated ? 'Log Out' : 'Log In' }}\n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            💽 Album Directory                            Home                            Albums                            Ratings Summary                            Genre Summary                                            {{ isAuthenticated ? \\'Log Out\\' : \\'Log In\\' }}                        '\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestWSComponent.html":{"url":"components/TestWSComponent.html","title":"component - TestWSComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestWSComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/testWS.component.ts\n\n\n\n    \n        Description\n    \n    \n        The TestWSComponent is responsible for testing the functionality of the WebService and AuthService.\nIt includes various test cases for verifying CRUD operations, user authentication, and other key features.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                WebService\n                \n            \n\n\n            \n                selector\n                testWS\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./testWS.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                first_album_list\n                            \n                            \n                                second_album_list\n                            \n                            \n                                test_output\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                testAddAlbum\n                            \n                            \n                                    Private\n                                testAlbumsFetched\n                            \n                            \n                                    Private\n                                testDeleteAlbum\n                            \n                            \n                                    Private\n                                testGetAlbum\n                            \n                            \n                                    Private\n                                testGetGenreRated\n                            \n                            \n                                    Private\n                                testGetHighRated\n                            \n                            \n                                    Private\n                                testGetReviews\n                            \n                            \n                                testIsAuthenticated\n                            \n                            \n                                testLogin\n                            \n                            \n                                    Private\n                                testPagesOfAlbumsAreDifferent\n                            \n                            \n                                    Private\n                                testPostReview\n                            \n                            \n                                    Private\n                                testSearchAlbum\n                            \n                            \n                                    Private\n                                testUpdateAlbum\n                            \n                            \n                                testUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(webService: WebService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/testWS.component.ts:29\n                            \n                        \n\n                \n                    \n                            Constructor for TestWSComponent.\nInjects the WebService and AuthService for testing purposes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        webService\n                                                  \n                                                        \n                                                                        WebService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service used for interacting with the API.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service used for managing authentication.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:347\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes the component and runs all test cases.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testAddAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    testAddAlbum()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:166\n                        \n                    \n\n\n            \n                \n                        Tests adding a new album to the database.\nSteps:\n\nFetches the initial list of albums to determine the count.\nSends a request to add a new album.\nFetches the newly added album by its ID to verify the details match.\nUpdates the test output with PASS or FAIL based on the results.\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testAlbumsFetched\n                        \n                    \n                \n            \n            \n                \n                        \n                    testAlbumsFetched()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Tests if a page of albums can be successfully fetched.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testDeleteAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    testDeleteAlbum()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:260\n                        \n                    \n\n\n            \n                \n                        Tests deleting an album from the database.\nSteps:\n\nAdds a fake album to the database for testing purposes.\nSends a request to delete the newly added fake album.\nAttempts to fetch the deleted album to verify it no longer exists.\nUpdates the test output with PASS or FAIL based on the results.\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testGetAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    testGetAlbum()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:71\n                        \n                    \n\n\n            \n                \n                        Tests fetching an album by ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testGetGenreRated\n                        \n                    \n                \n            \n            \n                \n                        \n                    testGetGenreRated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Tests fetching a genre summary for albums.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testGetHighRated\n                        \n                    \n                \n            \n            \n                \n                        \n                    testGetHighRated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:134\n                        \n                    \n\n\n            \n                \n                        Tests fetching high-rated albums.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testGetReviews\n                        \n                    \n                \n            \n            \n                \n                        \n                    testGetReviews()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Tests fetching reviews for a specific album.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testIsAuthenticated\n                        \n                    \n                \n            \n            \n                \ntestIsAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:315\n                        \n                    \n\n\n            \n                \n                        Tests the isAuthenticated observable in the AuthService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testLogin\n                        \n                    \n                \n            \n            \n                \ntestLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:297\n                        \n                    \n\n\n            \n                \n                        Tests login functionality.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testPagesOfAlbumsAreDifferent\n                        \n                    \n                \n            \n            \n                \n                        \n                    testPagesOfAlbumsAreDifferent()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:55\n                        \n                    \n\n\n            \n                \n                        Tests if albums from two different pages are distinct.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testPostReview\n                        \n                    \n                \n            \n            \n                \n                        \n                    testPostReview()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:95\n                        \n                    \n\n\n            \n                \n                        Tests posting a review for a specific album.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testSearchAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    testSearchAlbum()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Tests searching for an album by a query string.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testUpdateAlbum\n                        \n                    \n                \n            \n            \n                \n                        \n                    testUpdateAlbum()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:210\n                        \n                    \n\n\n            \n                \n                        Tests updating an existing album in the database.\nSteps:\n\nFetches the list of albums and selects the first album.\nSends a request to update the selected album with new details.\nFetches the updated album to verify the details were correctly updated.\nUpdates the test output with PASS or FAIL based on the results.\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testUserRole\n                        \n                    \n                \n            \n            \n                \ntestUserRole()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/testWS.component.ts:330\n                        \n                    \n\n\n            \n                \n                        Tests the userRole observable in the AuthService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        first_album_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/testWS.component.ts:24\n                        \n                    \n\n            \n                \n                    Stores the list of albums from the first page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        second_album_list\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/testWS.component.ts:29\n                        \n                    \n\n            \n                \n                    Stores the list of albums from the second page.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        test_output\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/testWS.component.ts:19\n                        \n                    \n\n            \n                \n                    Stores the output messages for each test case.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from \"@angular/core\";\nimport { WebService } from \"./services/web.service\";\nimport { AuthService } from \"./services/authService.component\";\n\n/**\n * The `TestWSComponent` is responsible for testing the functionality of the `WebService` and `AuthService`.\n * It includes various test cases for verifying CRUD operations, user authentication, and other key features.\n */\n@Component({\n    selector: 'testWS', // The selector used to include this component in the application.\n    providers: [WebService], // Provides the `WebService` specifically for this component.\n    templateUrl: './testWS.component.html' // The associated template file for this component.\n})\n\nexport class TestWSComponent {\n    /**\n     * Stores the output messages for each test case.\n     */\n    test_output: string[] = [];\n\n    /**\n     * Stores the list of albums from the first page.\n     */\n    first_album_list: any[] = [];\n\n    /**\n     * Stores the list of albums from the second page.\n     */\n    second_album_list: any[] = [];\n\n    /**\n     * Constructor for `TestWSComponent`.\n     * Injects the `WebService` and `AuthService` for testing purposes.\n     * \n     * @param webService - The service used for interacting with the API.\n     * @param authService - The service used for managing authentication.\n     */\n    constructor(private webService: WebService, private authService: AuthService) { }\n\n    /**\n     * Tests if a page of albums can be successfully fetched.\n     */\n    private testAlbumsFetched() {\n        this.webService.getAlbums(1).subscribe((response) => {\n            if (Array.isArray(response) && response.length === 9)\n                this.test_output.push(\"Page of Albums fetched... PASS\")\n            else\n                this.test_output.push(\"Page of Albums fetched... FAIL\")\n        })\n    }\n\n    /**\n     * Tests if albums from two different pages are distinct.\n     */\n    private testPagesOfAlbumsAreDifferent() {\n        this.webService.getAlbums(1).subscribe((response) => {\n            this.first_album_list = response;\n            this.webService.getAlbums(2).subscribe((response) => {\n                this.second_album_list = response;\n                if (this.first_album_list[0]['_id'] != this.second_album_list[0]['_id'])\n                    this.test_output.push(\"Albums Pages 1 and 2 are different... PASS\");\n                else\n                    this.test_output.push(\"Albums 1 and 2 are different... FAIL\");\n            })\n        })\n    }\n\n    /**\n     * Tests fetching an album by ID.\n     */\n    private testGetAlbum() {\n        this.webService.getAlbum('674a22f2c95979aa6b4510d7').subscribe((response) => {\n            if (response.artist === 'Pink Floyd')\n                this.test_output.push(\"Fetch Album 0 by ID... PASS\")\n            else\n                this.test_output.push(\"Fetch Album 0 by ID... FAIL\")\n        })\n    }\n\n    /**\n     * Tests fetching reviews for a specific album.\n     */\n    private testGetReviews() {\n        this.webService.getReviews('674a22f2c95979aa6b4510d7').subscribe((response) => {\n            if (Array.isArray(response))\n                this.test_output.push(\"Fetch Reviews of Album 0... PASS\")\n            else\n                this.test_output.push(\"Fetch Reviews Album 0... FAIL\")\n        })\n    }\n\n    /**\n     * Tests posting a review for a specific album.\n     */\n    private testPostReview() {\n        let test_review = {\n            \"username\": \"Test User\",\n            \"comment\": \"Test Comment\",\n            \"rating\": 5\n        };\n\n        this.webService.getReviews('674a22f2c95979aa6b4510d7').subscribe((response) => {\n            let num_reviews = response.length;\n            this.webService.postReview('674a22f2c95979aa6b4510d7', test_review)\n                .subscribe((response) => {\n                    this.webService.getReviews('674a22f2c95979aa6b4510d7')\n                        .subscribe((response) => {\n                            if (response.length == num_reviews + 1)\n                                this.test_output.push(\"Post review... PASS (Logged in as User Or Admin)\")\n                            else\n                                this.test_output.push(\"Post review... FAIL\")\n                        })\n                })\n        })\n    }\n\n    /**\n     * Tests searching for an album by a query string.\n     */\n    private testSearchAlbum() {\n        const query = \"Nirvana\"; // Example search query\n        this.webService.searchAlbum(query).subscribe((response) => {\n            if (Array.isArray(response) && response.length > 0 && response.some(album => album.artist === \"Nirvana\")) {\n                this.test_output.push(\"Search Album... PASS\");\n            } else {\n                this.test_output.push(\"Search Album... FAIL\");\n            }\n        });\n    }\n\n    /**\n     * Tests fetching high-rated albums.\n     */\n    private testGetHighRated() {\n        this.webService.getHighRated().subscribe((response) => {\n            if (Array.isArray(response) && response.length > 0) {\n                this.test_output.push(\"Get High Rated Albums... PASS\");\n            } else {\n                this.test_output.push(\"Get High Rated Albums... FAIL\");\n            }\n        });\n    }\n\n    /**\n     * Tests fetching a genre summary for albums.\n     */\n    private testGetGenreRated() {\n        this.webService.getGenreSummary().subscribe((response) => {\n            if (Array.isArray(response) && response.length > 0) {\n                this.test_output.push(\"Get Genre Albums... PASS\");\n            } else {\n                this.test_output.push(\"Get Genre Albums... FAIL\");\n            }\n        });\n    }\n\n    /**\n    * Tests adding a new album to the database.\n    * \n    * Steps:\n    * - Fetches the initial list of albums to determine the count.\n    * - Sends a request to add a new album.\n    * - Fetches the newly added album by its ID to verify the details match.\n    * - Updates the test output with PASS or FAIL based on the results.\n    */\n    private testAddAlbum() {\n        const test_album = {\n            artist: \"Test Artist\",\n            album_title: \"Test Album\",\n            year_of_release: 2024,\n            genre: \"Test Genre\"\n        };\n\n        this.webService.getAlbums(1).subscribe((initialResponse) => {\n            let initialCount = initialResponse.length;\n\n            this.webService.addAlbum(test_album).subscribe((addResponse) => {\n                console.log('Add Album Response:', addResponse);\n\n                this.webService.getAlbum(addResponse.album_id).subscribe((newAlbum) => {\n                    if (newAlbum.artist === test_album.artist &&\n                        newAlbum.album_title === test_album.album_title) {\n                        this.test_output.push(\"Add Album... PASS (Logged in as Admin)\");\n                    } else {\n                        this.test_output.push(\"Add Album... FAIL (Album details mismatch)\");\n                    }\n                }, (error) => {\n                    console.error('Fetch Newly Added Album Error:', error);\n                    this.test_output.push(\"Add Album... FAIL (Unable to fetch newly added album)\");\n                });\n            }, (error) => {\n                console.error(\"Add Album Error:\", error);\n                this.test_output.push(\"Add Album... FAIL (Permission or validation error)\");\n            });\n        }, (error) => {\n            console.error(\"Initial Album Fetch Error:\", error);\n            this.test_output.push(\"Add Album... FAIL (Failed to fetch initial albums)\");\n        });\n    }\n\n    /**\n    * Tests updating an existing album in the database.\n    * \n    * Steps:\n    * - Fetches the list of albums and selects the first album.\n    * - Sends a request to update the selected album with new details.\n    * - Fetches the updated album to verify the details were correctly updated.\n    * - Updates the test output with PASS or FAIL based on the results.\n    */\n    private testUpdateAlbum() {\n        const updatedAlbum = {\n            artist: \"Updated Artist\",\n            album_title: \"Updated Album\",\n            year_of_release: 2025\n        };\n\n        this.webService.getAlbums(1).subscribe((albums) => {\n            if (albums && albums.length > 0) {\n                const albumToUpdate = albums[0];\n                this.webService.updateAlbum(albumToUpdate._id, updatedAlbum).subscribe({\n                    next: (response) => {\n                        console.log('Update Album Response:', response);\n                        this.webService.getAlbum(albumToUpdate._id).subscribe((updatedAlbumDetails) => {\n                            if (updatedAlbumDetails.artist === updatedAlbum.artist &&\n                                updatedAlbumDetails.album_title === updatedAlbum.album_title &&\n                                updatedAlbumDetails.year_of_release === updatedAlbum.year_of_release\n                            ) {\n                                this.test_output.push(\"Update Album... PASS\");\n                            } else {\n                                this.test_output.push(\"Update Album... FAIL (Data mismatch)\");\n                            }\n                        }, (error) => {\n                            console.error('Fetch Updated Album Error:', error);\n                            this.test_output.push(\"Update Album... FAIL (Unable to fetch updated album)\");\n                        });\n                    },\n                    error: (error) => {\n                        console.error('Update Album Error:', error);\n                        this.test_output.push(\"Update Album... FAIL (Permission or validation error)\");\n                    }\n                });\n            } else {\n                this.test_output.push(\"Update Album... FAIL (No albums available to update)\");\n            }\n        }, (error) => {\n            console.error('Fetch Initial Albums Error:', error);\n            this.test_output.push(\"Update Album... FAIL (Unable to fetch initial albums)\");\n        });\n    }\n\n    /**\n    * Tests deleting an album from the database.\n    * \n    * Steps:\n    *  - Adds a fake album to the database for testing purposes.\n    * - Sends a request to delete the newly added fake album.\n    *  - Attempts to fetch the deleted album to verify it no longer exists.\n    * - Updates the test output with PASS or FAIL based on the results.\n    */\n    private testDeleteAlbum() {\n        const fakeAlbum = {\n            artist: \"Fake Artist\",\n            album_title: \"Fake Album\",\n            year_of_release: 2024,\n            genre: \"Fake Genre\"\n        };\n\n        this.webService.addAlbum(fakeAlbum).subscribe((addResponse) => {\n            console.log('Fake Album Added:', addResponse);\n\n            this.webService.deleteAlbum(addResponse.album_id).subscribe({\n                next: () => {\n                    console.log('Fake Album Deleted Successfully');\n                    this.webService.getAlbum(addResponse.album_id).subscribe({\n                        next: () => {\n                            this.test_output.push(\"Delete Album... FAIL (Fake album still exists)\");\n                        },\n                        error: () => {\n                            this.test_output.push(\"Delete Album... PASS (Fake album successfully deleted)\");\n                        }\n                    });\n                },\n                error: (error) => {\n                    console.error('Delete Album Error:', error);\n                    this.test_output.push(\"Delete Album... FAIL (Error deleting fake album)\");\n                }\n            });\n        }, (error) => {\n            console.error('Add Fake Album Error:', error);\n            this.test_output.push(\"Delete Album... FAIL (Unable to add fake album for testing)\");\n        });\n    }\n\n    /**\n     * Tests login functionality.\n     */\n    testLogin() {\n        const fakeCredentials = { username: \"kyrie10101\", password: \"user123\" };\n\n        this.authService.login(fakeCredentials.username, fakeCredentials.password).subscribe({\n            next: (response) => {\n                if (localStorage.getItem('token') && localStorage.getItem('role') === response.role) {\n                    this.test_output.push(\"Login... PASS\");\n                } else {\n                    this.test_output.push(\"Login... FAIL (Token or role not set properly)\");\n                }\n            }\n        });\n    }\n    \n\n    /**\n     * Tests the `isAuthenticated` observable in the `AuthService`.\n     */\n    testIsAuthenticated() {\n        this.authService.isAuthenticated$.next(true);\n    \n        this.authService.isAuthenticated().subscribe((isAuthenticated) => {\n            if (isAuthenticated) {\n                this.test_output.push(\"IsAuthenticated User... PASS\");\n            } \n        });\n        this.authService.isAuthenticated$.next(false);\n    }\n    \n\n    /**\n     * Tests the `userRole` observable in the `AuthService`.\n     */\n    testUserRole() {\n        // Simulate a user role\n        this.authService.userRole$.next('admin');\n    \n        this.authService.getUserRole().subscribe((role) => {\n            if (role === 'admin') {\n                this.test_output.push(\"UserRole Observable... PASS\");\n            } \n        });\n    \n        // Reset state\n        this.authService.userRole$.next('');\n    }\n    \n    /**\n     * Lifecycle hook that initializes the component and runs all test cases.\n     */\n    ngOnInit() {\n        this.testLogin();\n        this.testIsAuthenticated();\n        this.testUserRole();\n        this.testAlbumsFetched();\n        this.testPagesOfAlbumsAreDifferent();\n        this.testGetAlbum();\n        this.testGetReviews();\n        this.testPostReview();\n        this.testSearchAlbum();\n        this.testAddAlbum();\n        this.testUpdateAlbum();\n        this.testGetHighRated();\n        this.testGetGenreRated();\n        this.testDeleteAlbum();\n    }\n}\n    \n\n    \n        \n    \n        Test Report\n    \n\n    \n        @for(report of test_output; track report){\n            \n                {{report}}\n            \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Test Report                @for(report of test_output; track report){                            {{report}}                    }    '\n    var COMPONENTS = [{'name': 'AlbumComponent', 'selector': 'album'},{'name': 'AlbumGenreComponent', 'selector': 'genre'},{'name': 'AlbumRatingsComponent', 'selector': 'ratings'},{'name': 'AlbumsComponent', 'selector': 'albums'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AuthUserComponent', 'selector': 'user-profile'},{'name': 'HomeComponent', 'selector': 'home'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavComponent', 'selector': 'navigation'},{'name': 'TestWSComponent', 'selector': 'testWS'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TestWSComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebService.html":{"url":"injectables/WebService.html","title":"injectable - WebService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/web.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The WebService class provides a collection of methods for interacting with the Albums Directory API.\nThis service includes CRUD operations for albums, as well as methods for searching,\nreviewing, and retrieving summaries or statistics.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAlbum\n                            \n                            \n                                deleteAlbum\n                            \n                            \n                                deleteReview\n                            \n                            \n                                getAlbum\n                            \n                            \n                                getAlbums\n                            \n                            \n                                getGenreSummary\n                            \n                            \n                                getHighRated\n                            \n                            \n                                getReviews\n                            \n                            \n                                postReview\n                            \n                            \n                                searchAlbum\n                            \n                            \n                                updateAlbum\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/web.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WebService.\nInjects HttpClient for making HTTP requests.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular HttpClient used to perform HTTP requests.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAlbum\n                        \n                    \n                \n            \n            \n                \naddAlbum(album: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Adds a new album to the directory.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                album\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe album details to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable for the response of the addition operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAlbum\n                        \n                    \n                \n            \n            \n                \ndeleteAlbum(albumId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Deletes an album by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the album to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable for the response of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteReview\n                        \n                    \n                \n            \n            \n                \ndeleteReview(albumId: string, reviewId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Deletes a specific review for an album.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the album.\n\n\n                                            \n                                        \n                                        \n                                                reviewId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the review to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable for the response of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAlbum\n                        \n                    \n                \n            \n            \n                \ngetAlbum(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Fetches details of a single album by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the album to fetch.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An Observable for the album details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAlbums\n                        \n                    \n                \n            \n            \n                \ngetAlbums(page: number, genre?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Fetches a page of albums with optional genre filtering.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to fetch.\n\n\n                                            \n                                        \n                                        \n                                                genre\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \n(Optional) The genre of albums to filter by.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An Observable for the list of albums.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGenreSummary\n                        \n                    \n                \n            \n            \n                \ngetGenreSummary()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Fetches a summary of albums grouped by genre.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                An Observable for the genre summary.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHighRated\n                        \n                    \n                \n            \n            \n                \ngetHighRated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Fetches a list of highly rated albums.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                An Observable for the list of high-rated albums.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReviews\n                        \n                    \n                \n            \n            \n                \ngetReviews(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Fetches reviews for a specific album.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the album.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An Observable for the list of reviews.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postReview\n                        \n                    \n                \n            \n            \n                \npostReview(id: string, review: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Posts a new review for a specific album.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the album to review.\n\n\n                                            \n                                        \n                                        \n                                                review\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe review details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable for the response of the post operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchAlbum\n                        \n                    \n                \n            \n            \n                \nsearchAlbum(query: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Searches for albums by a query string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe search query string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An Observable for the list of matching albums.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAlbum\n                        \n                    \n                \n            \n            \n                \nupdateAlbum(albumId: string, album: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/web.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Updates an existing album's details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                albumId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the album to update.\n\n\n                                            \n                                        \n                                        \n                                                album\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe updated album details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable for the response of the update operation.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://127.0.0.1:5000/albums'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/web.service.ts:16\n                        \n                    \n\n            \n                \n                    The base URL for the Albums Directory API.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, throwError } from \"rxjs\";\n\n/**\n * The WebService class provides a collection of methods for interacting with the Albums Directory API.\n * This service includes CRUD operations for albums, as well as methods for searching,\n * reviewing, and retrieving summaries or statistics.\n */\n@Injectable()\nexport class WebService {\n    /**\n     * The base URL for the Albums Directory API.\n     * @type {string}\n     */\n    private baseUrl = 'http://127.0.0.1:5000/albums';\n\n    /**\n     * Constructor for WebService.\n     * Injects HttpClient for making HTTP requests.\n     * \n     * @param http - The Angular HttpClient used to perform HTTP requests.\n     */\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Fetches a page of albums with optional genre filtering.\n     * @param page - The page number to fetch.\n     * @param genre - (Optional) The genre of albums to filter by.\n     * @returns An Observable for the list of albums.\n     */\n    getAlbums(page: number, genre?: string) {\n        const params: any = { page };\n        if (genre) params.genre = genre;\n        return this.http.get('http://127.0.0.1:5000/albums', { params });\n    }\n    \n    /**\n     * Fetches details of a single album by its ID.\n     * @param id - The ID of the album to fetch.\n     * @returns An Observable for the album details.\n     */\n    getAlbum(id: any) {\n        return this.http.get('http://127.0.0.1:5000/albums/' + id);\n    }\n\n    /**\n     * Searches for albums by a query string.\n     * @param query - The search query string.\n     * @returns An Observable for the list of matching albums.\n     */\n    searchAlbum(query: string) {\n        return this.http.get('http://127.0.0.1:5000/albums/search', {\n            params: { query }\n        });\n    }\n\n    /**\n     * Adds a new album to the directory.\n     * @param album - The album details to add.\n     * @returns An Observable for the response of the addition operation.\n     */\n    addAlbum(album: any): Observable {\n        const token = localStorage.getItem('token'); // Retrieve the admin token\n        const headers = new HttpHeaders().set('x-access-token', token || '');\n\n        const formData = new FormData();\n        formData.append('artist', album.artist);\n        formData.append('album_title', album.album_title);\n        formData.append('year_of_release', album.year_of_release.toString());\n        formData.append('genre', album.genre);\n\n        return this.http.post(`${this.baseUrl}/`, formData, { headers });\n    }\n\n    /**\n     * Updates an existing album's details.\n     * @param albumId - The ID of the album to update.\n     * @param album - The updated album details.\n     * @returns An Observable for the response of the update operation.\n     */\n    updateAlbum(albumId: string, album: any): Observable {\n        const token = localStorage.getItem('token');\n        const headers = new HttpHeaders().set('x-access-token', token || '');\n\n        const formData = new FormData();\n        formData.append('artist', album.artist);\n        formData.append('album_title', album.album_title);\n        formData.append('year_of_release', album.year_of_release.toString());\n\n        return this.http.put(`${this.baseUrl}/${albumId}`, formData, { headers });\n    }\n\n    /**\n     * Deletes an album by its ID.\n     * @param albumId - The ID of the album to delete.\n     * @returns An Observable for the response of the delete operation.\n     */\n    deleteAlbum(albumId: string): Observable {\n        const token = localStorage.getItem('token');\n        const headers = new HttpHeaders().set('x-access-token', token || '');\n\n        return this.http.delete(`${this.baseUrl}/${albumId}`, { headers });\n    }\n\n    /**\n     * Fetches a summary of albums grouped by genre.\n     * @returns An Observable for the genre summary.\n     */\n    getGenreSummary() {\n        return this.http.get('http://127.0.0.1:5000/albums/genre-summary');\n    }\n\n    /**\n     * Fetches a list of highly rated albums.\n     * @returns An Observable for the list of high-rated albums.\n     */\n    getHighRated() {\n        return this.http.get('http://127.0.0.1:5000/albums/high-rated');\n    }\n\n    /**\n     * Fetches reviews for a specific album.\n     * @param id - The ID of the album.\n     * @returns An Observable for the list of reviews.\n     */\n    getReviews(id: any) {\n        return this.http.get('http://127.0.0.1:5000/albums/' + id + '/reviews');\n    }\n\n    /**\n     * Posts a new review for a specific album.\n     * @param id - The ID of the album to review.\n     * @param review - The review details.\n     * @returns An Observable for the response of the post operation.\n     */\n    postReview(id: string, review: any): Observable {\n        const token = localStorage.getItem('token'); // Retrieve the token\n        const headers = new HttpHeaders().set('x-access-token', token || '');\n\n        const postData = new FormData();\n        postData.append(\"username\", review.username);\n        postData.append(\"review_text\", review.review_text);\n        postData.append(\"rating\", review.rating.toString());\n\n        return this.http.post(`${this.baseUrl}/${id}/reviews`, postData, { headers });\n    }\n\n    /**\n     * Deletes a specific review for an album.\n     * @param albumId - The ID of the album.\n     * @param reviewId - The ID of the review to delete.\n     * @returns An Observable for the response of the delete operation.\n     */\n    deleteReview(albumId: string, reviewId: string): Observable {\n        const token = localStorage.getItem('token');\n        const headers = new HttpHeaders().set('x-access-token', token || '');\n\n        return this.http.delete(\n            `${this.baseUrl}/${albumId}/reviews/${reviewId}`, { headers });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/auth/authUser.component.ts\n            \n            component\n            AuthUserComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/components/album.component.ts\n            \n            component\n            AlbumComponent\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                src/app/components/albumGenre.component.ts\n            \n            component\n            AlbumGenreComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/components/albumRatings.component.ts\n            \n            component\n            AlbumRatingsComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/components/albums.component.ts\n            \n            component\n            AlbumsComponent\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/components/home.component.ts\n            \n            component\n            HomeComponent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/components/login.component.ts\n            \n            component\n            LoginComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/components/nav.component.ts\n            \n            component\n            NavComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/data.service.ts\n            \n            injectable\n            DataService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/services/authService.component.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/services/web.service.ts\n            \n            injectable\n            WebService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/testWS.component.ts\n            \n            component\n            TestWSComponent\n            \n                100 %\n                (20/20)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.0.0\n        \n            @angular/common : ^19.0.0\n        \n            @angular/compiler : ^19.0.0\n        \n            @angular/core : ^19.0.0\n        \n            @angular/forms : ^19.0.0\n        \n            @angular/platform-browser : ^19.0.0\n        \n            @angular/platform-browser-dynamic : ^19.0.0\n        \n            @angular/router : ^19.0.0\n        \n            @auth0/auth0-angular : ^2.2.3\n        \n            @compodoc/compodoc : ^1.1.26\n        \n            bootstrap : ^5.3.3\n        \n            jquery : ^3.7.1\n        \n            jwt-decode : ^4.0.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBizFE\nThis project was generated using Angular CLI version 19.0.1.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n   /**\n   * Array of providers used to configure the application.\n   * \n   * - `provideZoneChangeDetection`: Configures Angular's zone change detection with event coalescing enabled\n   *   to optimize performance by batching multiple events into a single change detection cycle.\n   * \n   * - `provideRouter`: Provides the application's routing configuration using the routes defined in `app.routes`.\n   * \n   * - `provideHttpClient`: Provides Angular's HttpClient for making HTTP requests.\n   */\n  providers: [\n    /**\n     * Configures Angular's zone change detection.\n     * \n     * @property eventCoalescing - If `true`, enables event coalescing, reducing the number of change detection cycles triggered by DOM events.\n     */\n    provideZoneChangeDetection({ eventCoalescing: true }), \n    /**\n     * Sets up the application's router with the defined routes.\n     * \n     * @param routes - The array of route definitions imported from `app.routes`.\n     */\n    provideRouter(routes),\n    /**\n     * Provides the HttpClient module to enable HTTP communication.\n     */\n    provideHttpClient()\n  ]\n}\n                    \n                \n\n            \n                \n                    The main application configuration.\nThis configuration sets up essential providers such as routing, HTTP client, and optimized zone change detection.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
